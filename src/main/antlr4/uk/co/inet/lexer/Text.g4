grammar Text;

@lexer::header
{
  import java.util.*;
  import java.util.stream.*;
  import java.util.regex.*;
}

@parser::header
{
  import java.util.*;
  import java.util.stream.*;
  import java.util.regex.*;
  import java.net.URI;
  import java.net.URL;
  import org.apache.commons.collections4.trie.PatriciaTrie;
}

@lexer::members
{
  private static final String wss = " \r\n\t\f\u2026\u2420\u303f\u1361\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u200B\u202F\u205F\u3000\uFEFF";

  private static Set<Integer> wsChars = null;
  //private boolean hasPrefix = false;

  static
  {
    wsChars = wss.chars().boxed().collect(Collectors.toSet());
  }

  final static String getDigits(String number)
  {
    int l = number.length();
    StringBuilder sb = new StringBuilder(l);

    for (int i = 0; i != l; i++)
    {
      char c = number.charAt(i);

      if (Character.isDigit(c))
        sb.append(c);
    }

    return sb.toString();
  }

  static boolean isValidLuhn(String number)
  {
    String digits = getDigits(number);
    int l = digits.length();

    if (l < 14 || l > 19 || l == 17)
      return false;

    int sum = 0;
    char fc = digits.charAt(0);

    if (fc == '4' && l != 16 && l != 13)
      return false;
    if (fc == '3' && l != 15 && l != 14)
      return false;

    boolean change = false;

    for (int i = l - 1; i >= 0; i--)
    {
      int n = (byte) digits.charAt(i) - (byte) '0';

      if (change)
      {
        n *= 2;

        if (n > 9)
          n = (n % 10) + 1;
      }

      sum += n;

      change = !change;
    }

    if (sum % 10 != 0)
      return false;

    return true;
    // Cannot supply this without permission or see : http://www.stevemorse.org/ssn/List_of_Bank_Identification_Numbers.html
    //return References.isReference("cardprefixes", digits.substring(0, 6));
  }

  public static final String trim(final String s)
  {
    String str = s.trim();  // get most of them
    int l;

    while ((l = str.length()) > 0 && wsChars.contains((int) str.charAt(0)))
      str = str.substring(1);
    while ((l = str.length()) > 0 && wsChars.contains((int) str.charAt(l - 1)))
      str = str.substring(0, l - 1);

    return str;
  }

  private Map<String,String[]> wordMap = new TreeMap<>();
  private Map<String,String[]> csWordMap = wordMap;

  public void setWordMap(Map<String,String[]> wordMap, Map<String,String[]> csWordMap)
  {
    if (wordMap != null)
    {
      this.wordMap = wordMap;
      this.csWordMap = csWordMap;
    }
  }

  private boolean isTld(String key)
  {
    key = key.substring(key.lastIndexOf('.'));

    return References.isReference("tlds", key);
  }

  private static final String punctStr = ".,;:?!\"#%()+/=>@[]^`{}|~";
  private static final char[] punctStr2 = {'\u00A1','\u00A6','\u00A7','\u00A8','\u00A9','\u00AB','\u00AC','\u00AE','\u00AF','\u00B0','\u00B1','\u00B4','\u00B6','\u00B7','\u00B8','\u00BB','\u00BF','\u00D7','\u00F7','\u02C2','\u02C3','\u02C4','\u02C5','\u02D2','\u02D3','\u02D4','\u02D5','\u02D6','\u02D7','\u02D8','\u02D9','\u02DA','\u02DB','\u02DC','\u02DD','\u02DE','\u02DF','\u02E5','\u02E6','\u02E7','\u02E8','\u02E9','\u02EA','\u02EB','\u02ED','\u02EF','\u02F0','\u02F1','\u02F2','\u02F3','\u02F4','\u02F5','\u02F6','\u02F7','\u02F8','\u02F9','\u02FA','\u02FB','\u02FC','\u02FD','\u02FE','\u02FF','\u0375','\u037E','\u0384','\u0385','\u0387','\u03F6','\u0482','\u055A','\u055B','\u055C','\u055D','\u055E','\u055F','\u0589','\u058A','\u05BE','\u05C0','\u05C3','\u05C6','\u05F3','\u05F4','\u0606','\u0607','\u0608','\u0609','\u060A','\u060C','\u060D','\u060E','\u060F','\u061B','\u061E','\u061F','\u066A','\u066B','\u066C','\u066D','\u06D4','\u06DE','\u06E9','\u06FD','\u06FE','\u0700','\u0701','\u0702','\u0703','\u0704','\u0705','\u0706','\u0707','\u0708','\u0709','\u070A','\u070B','\u070C','\u070D','\u07F6','\u07F7','\u07F8','\u07F9','\u0830','\u0831','\u0832','\u0833','\u0834','\u0835','\u0836','\u0837','\u0838','\u0839','\u083A','\u083B','\u083C','\u083D','\u083E','\u085E','\u0964','\u0965','\u0970','\u09FA','\u0AF0','\u0B70','\u0BF3','\u0BF4','\u0BF5','\u0BF6','\u0BF7','\u0BF8','\u0BFA','\u0C7F','\u0D79','\u0DF4','\u0E4F','\u0E5A','\u0E5B','\u0F01','\u0F02','\u0F03','\u0F04','\u0F05','\u0F06','\u0F07','\u0F08','\u0F09','\u0F0A','\u0F0B','\u0F0C','\u0F0D','\u0F0E','\u0F0F','\u0F10','\u0F11','\u0F12','\u0F13','\u0F14','\u0F15','\u0F16','\u0F17','\u0F1A','\u0F1B','\u0F1C','\u0F1D','\u0F1E','\u0F1F','\u0F34','\u0F36','\u0F38','\u0F3A','\u0F3B','\u0F3C','\u0F3D','\u0F85','\u0FBE','\u0FBF','\u0FC0','\u0FC1','\u0FC2','\u0FC3','\u0FC4','\u0FC5','\u0FC7','\u0FC8','\u0FC9','\u0FCA','\u0FCB','\u0FCC','\u0FCE','\u0FCF','\u0FD0','\u0FD1','\u0FD2','\u0FD3','\u0FD4','\u0FD5','\u0FD6','\u0FD7','\u0FD8','\u0FD9','\u0FDA','\u104A','\u104B','\u104C','\u104D','\u104E','\u104F','\u109E','\u109F','\u10FB','\u1360','\u1362','\u1363','\u1364','\u1365','\u1366','\u1367','\u1368','\u1390','\u1391','\u1392','\u1393','\u1394','\u1395','\u1396','\u1397','\u1398','\u1399','\u1400','\u166D','\u166E','\u169B','\u169C','\u16EB','\u16EC','\u16ED','\u1735','\u1736','\u17D4','\u17D5','\u17D6','\u17D8','\u17D9','\u17DA','\u1800','\u1801','\u1802','\u1803','\u1804','\u1805','\u1806','\u1807','\u1808','\u1809','\u180A','\u1940','\u1944','\u1945','\u19DE','\u19DF','\u19E0','\u19E1','\u19E2','\u19E3','\u19E4','\u19E5','\u19E6','\u19E7','\u19E8','\u19E9','\u19EA','\u19EB','\u19EC','\u19ED','\u19EE','\u19EF','\u19F0','\u19F1','\u19F2','\u19F3','\u19F4','\u19F5','\u19F6','\u19F7','\u19F8','\u19F9','\u19FA','\u19FB','\u19FC','\u19FD','\u19FE','\u19FF','\u1A1E','\u1A1F','\u1AA0','\u1AA1','\u1AA2','\u1AA3','\u1AA4','\u1AA5','\u1AA6','\u1AA8','\u1AA9','\u1AAA','\u1AAB','\u1AAC','\u1AAD','\u1B5A','\u1B5B','\u1B5C','\u1B5D','\u1B5E','\u1B5F','\u1B60','\u1B61','\u1B62','\u1B63','\u1B64','\u1B65','\u1B66','\u1B67','\u1B68','\u1B69','\u1B6A','\u1B74','\u1B75','\u1B76','\u1B77','\u1B78','\u1B79','\u1B7A','\u1B7B','\u1B7C','\u1BFC','\u1BFD','\u1BFE','\u1BFF','\u1C3B','\u1C3C','\u1C3D','\u1C3E','\u1C3F','\u1C7E','\u1C7F','\u1CC0','\u1CC1','\u1CC2','\u1CC3','\u1CC4','\u1CC5','\u1CC6','\u1CC7','\u1CD3','\u1FBD','\u1FBF','\u1FC0','\u1FC1','\u1FCD','\u1FCE','\u1FCF','\u1FDD','\u1FDE','\u1FDF','\u1FED','\u1FEE','\u1FEF','\u1FFD','\u1FFE','\u2010','\u2011','\u2012','\u2013','\u2014','\u2015','\u2016','\u2017','\u2018','\u201A','\u201B','\u201C','\u201D','\u201E','\u201F','\u2020','\u2021','\u2022','\u2023','\u2024','\u2025','\u2026','\u2027','\u2030','\u2031','\u2032','\u2033','\u2034','\u2035','\u2036','\u2037','\u2038','\u2039','\u203A','\u203B','\u203C','\u203D','\u203E','\u203F','\u2040','\u2041','\u2042','\u2043','\u2044','\u2045','\u2046','\u2047','\u2048','\u2049','\u204A','\u204B','\u204C','\u204D','\u204E','\u204F','\u2050','\u2051','\u2052','\u2053','\u2054','\u2055','\u2056','\u2057','\u2058','\u2059','\u205A','\u205B','\u205C','\u205D','\u205E','\u207A','\u207B','\u207C','\u207D','\u207E','\u208A','\u208B','\u208C','\u208D','\u208E','\u2100','\u2101','\u2103','\u2104','\u2105','\u2106','\u2108','\u2109','\u2114','\u2116','\u2117','\u2118','\u211E','\u211F','\u2120','\u2121','\u2122','\u2123','\u2125','\u2127','\u2129','\u212E','\u213A','\u213B','\u2140','\u2141','\u2142','\u2143','\u2144','\u214A','\u214B','\u214C','\u214D','\u214F','\u2190','\u2191','\u2192','\u2193','\u2194','\u2195','\u2196','\u2197','\u2198','\u2199','\u219A','\u219B','\u219C','\u219D','\u219E','\u219F','\u21A0','\u21A1','\u21A2','\u21A3','\u21A4','\u21A5','\u21A6','\u21A7','\u21A8','\u21A9','\u21AA','\u21AB','\u21AC','\u21AD','\u21AE','\u21AF','\u21B0','\u21B1','\u21B2','\u21B3','\u21B4','\u21B5','\u21B6','\u21B7','\u21B8','\u21B9','\u21BA','\u21BB','\u21BC','\u21BD','\u21BE','\u21BF','\u21C0','\u21C1','\u21C2','\u21C3','\u21C4','\u21C5','\u21C6','\u21C7','\u21C8','\u21C9','\u21CA','\u21CB','\u21CC','\u21CD','\u21CE','\u21CF','\u21D0','\u21D1','\u21D2','\u21D3','\u21D4','\u21D5','\u21D6','\u21D7','\u21D8','\u21D9','\u21DA','\u21DB','\u21DC','\u21DD','\u21DE','\u21DF','\u21E0','\u21E1','\u21E2','\u21E3','\u21E4','\u21E5','\u21E6','\u21E7','\u21E8','\u21E9','\u21EA','\u21EB','\u21EC','\u21ED','\u21EE','\u21EF','\u21F0','\u21F1','\u21F2','\u21F3','\u21F4','\u21F5','\u21F6','\u21F7','\u21F8','\u21F9','\u21FA','\u21FB','\u21FC','\u21FD','\u21FE','\u21FF','\u2200','\u2201','\u2202','\u2203','\u2204','\u2205','\u2206','\u2207','\u2208','\u2209','\u220A','\u220B','\u220C','\u220D','\u220E','\u220F','\u2210','\u2211','\u2212','\u2213','\u2214','\u2215','\u2216','\u2217','\u2218','\u2219','\u221A','\u221B','\u221C','\u221D','\u221E','\u221F','\u2220','\u2221','\u2222','\u2223','\u2224','\u2225','\u2226','\u2227','\u2228','\u2229','\u222A','\u222B','\u222C','\u222D','\u222E','\u222F','\u2230','\u2231','\u2232','\u2233','\u2234','\u2235','\u2236','\u2237','\u2238','\u2239','\u223A','\u223B','\u223C','\u223D','\u223E','\u223F','\u2240','\u2241','\u2242','\u2243','\u2244','\u2245','\u2246','\u2247','\u2248','\u2249','\u224A','\u224B','\u224C','\u224D','\u224E','\u224F','\u2250','\u2251','\u2252','\u2253','\u2254','\u2255','\u2256','\u2257','\u2258','\u2259','\u225A','\u225B','\u225C','\u225D','\u225E','\u225F','\u2260','\u2261','\u2262','\u2263','\u2264','\u2265','\u2266','\u2267','\u2268','\u2269','\u226A','\u226B','\u226C','\u226D','\u226E','\u226F','\u2270','\u2271','\u2272','\u2273','\u2274','\u2275','\u2276','\u2277','\u2278','\u2279','\u227A','\u227B','\u227C','\u227D','\u227E','\u227F','\u2280','\u2281','\u2282','\u2283','\u2284','\u2285','\u2286','\u2287','\u2288','\u2289','\u228A','\u228B','\u228C','\u228D','\u228E','\u228F','\u2290','\u2291','\u2292','\u2293','\u2294','\u2295','\u2296','\u2297','\u2298','\u2299','\u229A','\u229B','\u229C','\u229D','\u229E','\u229F','\u22A0','\u22A1','\u22A2','\u22A3','\u22A4','\u22A5','\u22A6','\u22A7','\u22A8','\u22A9','\u22AA','\u22AB','\u22AC','\u22AD','\u22AE','\u22AF','\u22B0','\u22B1','\u22B2','\u22B3','\u22B4','\u22B5','\u22B6','\u22B7','\u22B8','\u22B9','\u22BA','\u22BB','\u22BC','\u22BD','\u22BE','\u22BF','\u22C0','\u22C1','\u22C2','\u22C3','\u22C4','\u22C5','\u22C6','\u22C7','\u22C8','\u22C9','\u22CA','\u22CB','\u22CC','\u22CD','\u22CE','\u22CF','\u22D0','\u22D1','\u22D2','\u22D3','\u22D4','\u22D5','\u22D6','\u22D7','\u22D8','\u22D9','\u22DA','\u22DB','\u22DC','\u22DD','\u22DE','\u22DF','\u22E0','\u22E1','\u22E2','\u22E3','\u22E4','\u22E5','\u22E6','\u22E7','\u22E8','\u22E9','\u22EA','\u22EB','\u22EC','\u22ED','\u22EE','\u22EF','\u22F0','\u22F1','\u22F2','\u22F3','\u22F4','\u22F5','\u22F6','\u22F7','\u22F8','\u22F9','\u22FA','\u22FB','\u22FC','\u22FD','\u22FE','\u22FF','\u2300','\u2301','\u2302','\u2303','\u2304','\u2305','\u2306','\u2307','\u2308','\u2309','\u230A','\u230B','\u230C','\u230D','\u230E','\u230F','\u2310','\u2311','\u2312','\u2313','\u2314','\u2315','\u2316','\u2317','\u2318','\u2319','\u231A','\u231B','\u231C','\u231D','\u231E','\u231F','\u2320','\u2321','\u2322','\u2323','\u2324','\u2325','\u2326','\u2327','\u2328','\u2329','\u232A','\u232B','\u232C','\u232D','\u232E','\u232F','\u2330','\u2331','\u2332','\u2333','\u2334','\u2335','\u2336','\u2337','\u2338','\u2339','\u233A','\u233B','\u233C','\u233D','\u233E','\u233F','\u2340','\u2341','\u2342','\u2343','\u2344','\u2345','\u2346','\u2347','\u2348','\u2349','\u234A','\u234B','\u234C','\u234D','\u234E','\u234F','\u2350','\u2351','\u2352','\u2353','\u2354','\u2355','\u2356','\u2357','\u2358','\u2359','\u235A','\u235B','\u235C','\u235D','\u235E','\u235F','\u2360','\u2361','\u2362','\u2363','\u2364','\u2365','\u2366','\u2367','\u2368','\u2369','\u236A','\u236B','\u236C','\u236D','\u236E','\u236F','\u2370','\u2371','\u2372','\u2373','\u2374','\u2375','\u2376','\u2377','\u2378','\u2379','\u237A','\u237B','\u237C','\u237D','\u237E','\u237F','\u2380','\u2381','\u2382','\u2383','\u2384','\u2385','\u2386','\u2387','\u2388','\u2389','\u238A','\u238B','\u238C','\u238D','\u238E','\u238F','\u2390','\u2391','\u2392','\u2393','\u2394','\u2395','\u2396','\u2397','\u2398','\u2399','\u239A','\u239B','\u239C','\u239D','\u239E','\u239F','\u23A0','\u23A1','\u23A2','\u23A3','\u23A4','\u23A5','\u23A6','\u23A7','\u23A8','\u23A9','\u23AA','\u23AB','\u23AC','\u23AD','\u23AE','\u23AF','\u23B0','\u23B1','\u23B2','\u23B3','\u23B4','\u23B5','\u23B6','\u23B7','\u23B8','\u23B9','\u23BA','\u23BB','\u23BC','\u23BD','\u23BE','\u23BF','\u23C0','\u23C1','\u23C2','\u23C3','\u23C4','\u23C5','\u23C6','\u23C7','\u23C8','\u23C9','\u23CA','\u23CB','\u23CC','\u23CD','\u23CE','\u23CF','\u23D0','\u23D1','\u23D2','\u23D3','\u23D4','\u23D5','\u23D6','\u23D7','\u23D8','\u23D9','\u23DA','\u23DB','\u23DC','\u23DD','\u23DE','\u23DF','\u23E0','\u23E1','\u23E2','\u23E3','\u23E4','\u23E5','\u23E6','\u23E7','\u23E8','\u23E9','\u23EA','\u23EB','\u23EC','\u23ED','\u23EE','\u23EF','\u23F0','\u23F1','\u23F2','\u23F3','\u2400','\u2401','\u2402','\u2403','\u2404','\u2405','\u2406','\u2407','\u2408','\u2409','\u240A','\u240B','\u240C','\u240D','\u240E','\u240F','\u2410','\u2411','\u2412','\u2413','\u2414','\u2415','\u2416','\u2417','\u2418','\u2419','\u241A','\u241B','\u241C','\u241D','\u241E','\u241F','\u2421','\u2422','\u2423','\u2424','\u2425','\u2426','\u2440','\u2441','\u2442','\u2443','\u2444','\u2445','\u2446','\u2447','\u2448','\u2449','\u244A','\u249C','\u249D','\u249E','\u249F','\u24A0','\u24A1','\u24A2','\u24A3','\u24A4','\u24A5','\u24A6','\u24A7','\u24A8','\u24A9','\u24AA','\u24AB','\u24AC','\u24AD','\u24AE','\u24AF','\u24B0','\u24B1','\u24B2','\u24B3','\u24B4','\u24B5','\u24B6','\u24B7','\u24B8','\u24B9','\u24BA','\u24BB','\u24BC','\u24BD','\u24BE','\u24BF','\u24C0','\u24C1','\u24C2','\u24C3','\u24C4','\u24C5','\u24C6','\u24C7','\u24C8','\u24C9','\u24CA','\u24CB','\u24CC','\u24CD','\u24CE','\u24CF','\u24D0','\u24D1','\u24D2','\u24D3','\u24D4','\u24D5','\u24D6','\u24D7','\u24D8','\u24D9','\u24DA','\u24DB','\u24DC','\u24DD','\u24DE','\u24DF','\u24E0','\u24E1','\u24E2','\u24E3','\u24E4','\u24E5','\u24E6','\u24E7','\u24E8','\u24E9','\u2500','\u2501','\u2502','\u2503','\u2504','\u2505','\u2506','\u2507','\u2508','\u2509','\u250A','\u250B','\u250C','\u250D','\u250E','\u250F','\u2510','\u2511','\u2512','\u2513','\u2514','\u2515','\u2516','\u2517','\u2518','\u2519','\u251A','\u251B','\u251C','\u251D','\u251E','\u251F','\u2520','\u2521','\u2522','\u2523','\u2524','\u2525','\u2526','\u2527','\u2528','\u2529','\u252A','\u252B','\u252C','\u252D','\u252E','\u252F','\u2530','\u2531','\u2532','\u2533','\u2534','\u2535','\u2536','\u2537','\u2538','\u2539','\u253A','\u253B','\u253C','\u253D','\u253E','\u253F','\u2540','\u2541','\u2542','\u2543','\u2544','\u2545','\u2546','\u2547','\u2548','\u2549','\u254A','\u254B','\u254C','\u254D','\u254E','\u254F','\u2550','\u2551','\u2552','\u2553','\u2554','\u2555','\u2556','\u2557','\u2558','\u2559','\u255A','\u255B','\u255C','\u255D','\u255E','\u255F','\u2560','\u2561','\u2562','\u2563','\u2564','\u2565','\u2566','\u2567','\u2568','\u2569','\u256A','\u256B','\u256C','\u256D','\u256E','\u256F','\u2570','\u2571','\u2572','\u2573','\u2574','\u2575','\u2576','\u2577','\u2578','\u2579','\u257A','\u257B','\u257C','\u257D','\u257E','\u257F','\u2580','\u2581','\u2582','\u2583','\u2584','\u2585','\u2586','\u2587','\u2588','\u2589','\u258A','\u258B','\u258C','\u258D','\u258E','\u258F','\u2590','\u2591','\u2592','\u2593','\u2594','\u2595','\u2596','\u2597','\u2598','\u2599','\u259A','\u259B','\u259C','\u259D','\u259E','\u259F','\u25A0','\u25A1','\u25A2','\u25A3','\u25A4','\u25A5','\u25A6','\u25A7','\u25A8','\u25A9','\u25AA','\u25AB','\u25AC','\u25AD','\u25AE','\u25AF','\u25B0','\u25B1','\u25B2','\u25B3','\u25B4','\u25B5','\u25B6','\u25B7','\u25B8','\u25B9','\u25BA','\u25BB','\u25BC','\u25BD','\u25BE','\u25BF','\u25C0','\u25C1','\u25C2','\u25C3','\u25C4','\u25C5','\u25C6','\u25C7','\u25C8','\u25C9','\u25CA','\u25CB','\u25CC','\u25CD','\u25CE','\u25CF','\u25D0','\u25D1','\u25D2','\u25D3','\u25D4','\u25D5','\u25D6','\u25D7','\u25D8','\u25D9','\u25DA','\u25DB','\u25DC','\u25DD','\u25DE','\u25DF','\u25E0','\u25E1','\u25E2','\u25E3','\u25E4','\u25E5','\u25E6','\u25E7','\u25E8','\u25E9','\u25EA','\u25EB','\u25EC','\u25ED','\u25EE','\u25EF','\u25F0','\u25F1','\u25F2','\u25F3','\u25F4','\u25F5','\u25F6','\u25F7','\u25F8','\u25F9','\u25FA','\u25FB','\u25FC','\u25FD','\u25FE','\u25FF','\u2600','\u2601','\u2602','\u2603','\u2604','\u2605','\u2606','\u2607','\u2608','\u2609','\u260A','\u260B','\u260C','\u260D','\u260E','\u260F','\u2610','\u2611','\u2612','\u2613','\u2614','\u2615','\u2616','\u2617','\u2618','\u2619','\u261A','\u261B','\u261C','\u261D','\u261E','\u261F','\u2620','\u2621','\u2622','\u2623','\u2624','\u2625','\u2626','\u2627','\u2628','\u2629','\u262A','\u262B','\u262C','\u262D','\u262E','\u262F','\u2630','\u2631','\u2632','\u2633','\u2634','\u2635','\u2636','\u2637','\u2638','\u2639','\u263A','\u263B','\u263C','\u263D','\u263E','\u263F','\u2640','\u2641','\u2642','\u2643','\u2644','\u2645','\u2646','\u2647','\u2648','\u2649','\u264A','\u264B','\u264C','\u264D','\u264E','\u264F','\u2650','\u2651','\u2652','\u2653','\u2654','\u2655','\u2656','\u2657','\u2658','\u2659','\u265A','\u265B','\u265C','\u265D','\u265E','\u265F','\u2660','\u2661','\u2662','\u2663','\u2664','\u2665','\u2666','\u2667','\u2668','\u2669','\u266A','\u266B','\u266C','\u266D','\u266E','\u266F','\u2670','\u2671','\u2672','\u2673','\u2674','\u2675','\u2676','\u2677','\u2678','\u2679','\u267A','\u267B','\u267C','\u267D','\u267E','\u267F','\u2680','\u2681','\u2682','\u2683','\u2684','\u2685','\u2686','\u2687','\u2688','\u2689','\u268A','\u268B','\u268C','\u268D','\u268E','\u268F','\u2690','\u2691','\u2692','\u2693','\u2694','\u2695','\u2696','\u2697','\u2698','\u2699','\u269A','\u269B','\u269C','\u269D','\u269E','\u269F','\u26A0','\u26A1','\u26A2','\u26A3','\u26A4','\u26A5','\u26A6','\u26A7','\u26A8','\u26A9','\u26AA','\u26AB','\u26AC','\u26AD','\u26AE','\u26AF','\u26B0','\u26B1','\u26B2','\u26B3','\u26B4','\u26B5','\u26B6','\u26B7','\u26B8','\u26B9','\u26BA','\u26BB','\u26BC','\u26BD','\u26BE','\u26BF','\u26C0','\u26C1','\u26C2','\u26C3','\u26C4','\u26C5','\u26C6','\u26C7','\u26C8','\u26C9','\u26CA','\u26CB','\u26CC','\u26CD','\u26CE','\u26CF','\u26D0','\u26D1','\u26D2','\u26D3','\u26D4','\u26D5','\u26D6','\u26D7','\u26D8','\u26D9','\u26DA','\u26DB','\u26DC','\u26DD','\u26DE','\u26DF','\u26E0','\u26E1','\u26E2','\u26E3','\u26E4','\u26E5','\u26E6','\u26E7','\u26E8','\u26E9','\u26EA','\u26EB','\u26EC','\u26ED','\u26EE','\u26EF','\u26F0','\u26F1','\u26F2','\u26F3','\u26F4','\u26F5','\u26F6','\u26F7','\u26F8','\u26F9','\u26FA','\u26FB','\u26FC','\u26FD','\u26FE','\u26FF','\u2701','\u2702','\u2703','\u2704','\u2705','\u2706','\u2707','\u2708','\u2709','\u270A','\u270B','\u270C','\u270D','\u270E','\u270F','\u2710','\u2711','\u2712','\u2713','\u2714','\u2715','\u2716','\u2717','\u2718','\u2719','\u271A','\u271B','\u271C','\u271D','\u271E','\u271F','\u2720','\u2721','\u2722','\u2723','\u2724','\u2725','\u2726','\u2727','\u2728','\u2729','\u272A','\u272B','\u272C','\u272D','\u272E','\u272F','\u2730','\u2731','\u2732','\u2733','\u2734','\u2735','\u2736','\u2737','\u2738','\u2739','\u273A','\u273B','\u273C','\u273D','\u273E','\u273F','\u2740','\u2741','\u2742','\u2743','\u2744','\u2745','\u2746','\u2747','\u2748','\u2749','\u274A','\u274B','\u274C','\u274D','\u274E','\u274F','\u2750','\u2751','\u2752','\u2753','\u2754','\u2755','\u2756','\u2757','\u2758','\u2759','\u275A','\u275B','\u275C','\u275D','\u275E','\u275F','\u2760','\u2761','\u2762','\u2763','\u2764','\u2765','\u2766','\u2767','\u2768','\u2769','\u276A','\u276B','\u276C','\u276D','\u276E','\u276F','\u2770','\u2771','\u2772','\u2773','\u2774','\u2775','\u2794','\u2795','\u2796','\u2797','\u2798','\u2799','\u279A','\u279B','\u279C','\u279D','\u279E','\u279F','\u27A0','\u27A1','\u27A2','\u27A3','\u27A4','\u27A5','\u27A6','\u27A7','\u27A8','\u27A9','\u27AA','\u27AB','\u27AC','\u27AD','\u27AE','\u27AF','\u27B0','\u27B1','\u27B2','\u27B3','\u27B4','\u27B5','\u27B6','\u27B7','\u27B8','\u27B9','\u27BA','\u27BB','\u27BC','\u27BD','\u27BE','\u27BF','\u27C0','\u27C1','\u27C2','\u27C3','\u27C4','\u27C5','\u27C6','\u27C7','\u27C8','\u27C9','\u27CA','\u27CB','\u27CC','\u27CD','\u27CE','\u27CF','\u27D0','\u27D1','\u27D2','\u27D3','\u27D4','\u27D5','\u27D6','\u27D7','\u27D8','\u27D9','\u27DA','\u27DB','\u27DC','\u27DD','\u27DE','\u27DF','\u27E0','\u27E1','\u27E2','\u27E3','\u27E4','\u27E5','\u27E6','\u27E7','\u27E8','\u27E9','\u27EA','\u27EB','\u27EC','\u27ED','\u27EE','\u27EF','\u27F0','\u27F1','\u27F2','\u27F3','\u27F4','\u27F5','\u27F6','\u27F7','\u27F8','\u27F9','\u27FA','\u27FB','\u27FC','\u27FD','\u27FE','\u27FF','\u2800','\u2801','\u2802','\u2803','\u2804','\u2805','\u2806','\u2807','\u2808','\u2809','\u280A','\u280B','\u280C','\u280D','\u280E','\u280F','\u2810','\u2811','\u2812','\u2813','\u2814','\u2815','\u2816','\u2817','\u2818','\u2819','\u281A','\u281B','\u281C','\u281D','\u281E','\u281F','\u2820','\u2821','\u2822','\u2823','\u2824','\u2825','\u2826','\u2827','\u2828','\u2829','\u282A','\u282B','\u282C','\u282D','\u282E','\u282F','\u2830','\u2831','\u2832','\u2833','\u2834','\u2835','\u2836','\u2837','\u2838','\u2839','\u283A','\u283B','\u283C','\u283D','\u283E','\u283F','\u2840','\u2841','\u2842','\u2843','\u2844','\u2845','\u2846','\u2847','\u2848','\u2849','\u284A','\u284B','\u284C','\u284D','\u284E','\u284F','\u2850','\u2851','\u2852','\u2853','\u2854','\u2855','\u2856','\u2857','\u2858','\u2859','\u285A','\u285B','\u285C','\u285D','\u285E','\u285F','\u2860','\u2861','\u2862','\u2863','\u2864','\u2865','\u2866','\u2867','\u2868','\u2869','\u286A','\u286B','\u286C','\u286D','\u286E','\u286F','\u2870','\u2871','\u2872','\u2873','\u2874','\u2875','\u2876','\u2877','\u2878','\u2879','\u287A','\u287B','\u287C','\u287D','\u287E','\u287F','\u2880','\u2881','\u2882','\u2883','\u2884','\u2885','\u2886','\u2887','\u2888','\u2889','\u288A','\u288B','\u288C','\u288D','\u288E','\u288F','\u2890','\u2891','\u2892','\u2893','\u2894','\u2895','\u2896','\u2897','\u2898','\u2899','\u289A','\u289B','\u289C','\u289D','\u289E','\u289F','\u28A0','\u28A1','\u28A2','\u28A3','\u28A4','\u28A5','\u28A6','\u28A7','\u28A8','\u28A9','\u28AA','\u28AB','\u28AC','\u28AD','\u28AE','\u28AF','\u28B0','\u28B1','\u28B2','\u28B3','\u28B4','\u28B5','\u28B6','\u28B7','\u28B8','\u28B9','\u28BA','\u28BB','\u28BC','\u28BD','\u28BE','\u28BF','\u28C0','\u28C1','\u28C2','\u28C3','\u28C4','\u28C5','\u28C6','\u28C7','\u28C8','\u28C9','\u28CA','\u28CB','\u28CC','\u28CD','\u28CE','\u28CF','\u28D0','\u28D1','\u28D2','\u28D3','\u28D4','\u28D5','\u28D6','\u28D7','\u28D8','\u28D9','\u28DA','\u28DB','\u28DC','\u28DD','\u28DE','\u28DF','\u28E0','\u28E1','\u28E2','\u28E3','\u28E4','\u28E5','\u28E6','\u28E7','\u28E8','\u28E9','\u28EA','\u28EB','\u28EC','\u28ED','\u28EE','\u28EF','\u28F0','\u28F1','\u28F2','\u28F3','\u28F4','\u28F5','\u28F6','\u28F7','\u28F8','\u28F9','\u28FA','\u28FB','\u28FC','\u28FD','\u28FE','\u28FF','\u2900','\u2901','\u2902','\u2903','\u2904','\u2905','\u2906','\u2907','\u2908','\u2909','\u290A','\u290B','\u290C','\u290D','\u290E','\u290F','\u2910','\u2911','\u2912','\u2913','\u2914','\u2915','\u2916','\u2917','\u2918','\u2919','\u291A','\u291B','\u291C','\u291D','\u291E','\u291F','\u2920','\u2921','\u2922','\u2923','\u2924','\u2925','\u2926','\u2927','\u2928','\u2929','\u292A','\u292B','\u292C','\u292D','\u292E','\u292F','\u2930','\u2931','\u2932','\u2933','\u2934','\u2935','\u2936','\u2937','\u2938','\u2939','\u293A','\u293B','\u293C','\u293D','\u293E','\u293F','\u2940','\u2941','\u2942','\u2943','\u2944','\u2945','\u2946','\u2947','\u2948','\u2949','\u294A','\u294B','\u294C','\u294D','\u294E','\u294F','\u2950','\u2951','\u2952','\u2953','\u2954','\u2955','\u2956','\u2957','\u2958','\u2959','\u295A','\u295B','\u295C','\u295D','\u295E','\u295F','\u2960','\u2961','\u2962','\u2963','\u2964','\u2965','\u2966','\u2967','\u2968','\u2969','\u296A','\u296B','\u296C','\u296D','\u296E','\u296F','\u2970','\u2971','\u2972','\u2973','\u2974','\u2975','\u2976','\u2977','\u2978','\u2979','\u297A','\u297B','\u297C','\u297D','\u297E','\u297F','\u2980','\u2981','\u2982','\u2983','\u2984','\u2985','\u2986','\u2987','\u2988','\u2989','\u298A','\u298B','\u298C','\u298D','\u298E','\u298F','\u2990','\u2991','\u2992','\u2993','\u2994','\u2995','\u2996','\u2997','\u2998','\u2999','\u299A','\u299B','\u299C','\u299D','\u299E','\u299F','\u29A0','\u29A1','\u29A2','\u29A3','\u29A4','\u29A5','\u29A6','\u29A7','\u29A8','\u29A9','\u29AA','\u29AB','\u29AC','\u29AD','\u29AE','\u29AF','\u29B0','\u29B1','\u29B2','\u29B3','\u29B4','\u29B5','\u29B6','\u29B7','\u29B8','\u29B9','\u29BA','\u29BB','\u29BC','\u29BD','\u29BE','\u29BF','\u29C0','\u29C1','\u29C2','\u29C3','\u29C4','\u29C5','\u29C6','\u29C7','\u29C8','\u29C9','\u29CA','\u29CB','\u29CC','\u29CD','\u29CE','\u29CF','\u29D0','\u29D1','\u29D2','\u29D3','\u29D4','\u29D5','\u29D6','\u29D7','\u29D8','\u29D9','\u29DA','\u29DB','\u29DC','\u29DD','\u29DE','\u29DF','\u29E0','\u29E1','\u29E2','\u29E3','\u29E4','\u29E5','\u29E6','\u29E7','\u29E8','\u29E9','\u29EA','\u29EB','\u29EC','\u29ED','\u29EE','\u29EF','\u29F0','\u29F1','\u29F2','\u29F3','\u29F4','\u29F5','\u29F6','\u29F7','\u29F8','\u29F9','\u29FA','\u29FB','\u29FC','\u29FD','\u29FE','\u29FF','\u2A00','\u2A01','\u2A02','\u2A03','\u2A04','\u2A05','\u2A06','\u2A07','\u2A08','\u2A09','\u2A0A','\u2A0B','\u2A0C','\u2A0D','\u2A0E','\u2A0F','\u2A10','\u2A11','\u2A12','\u2A13','\u2A14','\u2A15','\u2A16','\u2A17','\u2A18','\u2A19','\u2A1A','\u2A1B','\u2A1C','\u2A1D','\u2A1E','\u2A1F','\u2A20','\u2A21','\u2A22','\u2A23','\u2A24','\u2A25','\u2A26','\u2A27','\u2A28','\u2A29','\u2A2A','\u2A2B','\u2A2C','\u2A2D','\u2A2E','\u2A2F','\u2A30','\u2A31','\u2A32','\u2A33','\u2A34','\u2A35','\u2A36','\u2A37','\u2A38','\u2A39','\u2A3A','\u2A3B','\u2A3C','\u2A3D','\u2A3E','\u2A3F','\u2A40','\u2A41','\u2A42','\u2A43','\u2A44','\u2A45','\u2A46','\u2A47','\u2A48','\u2A49','\u2A4A','\u2A4B','\u2A4C','\u2A4D','\u2A4E','\u2A4F','\u2A50','\u2A51','\u2A52','\u2A53','\u2A54','\u2A55','\u2A56','\u2A57','\u2A58','\u2A59','\u2A5A','\u2A5B','\u2A5C','\u2A5D','\u2A5E','\u2A5F','\u2A60','\u2A61','\u2A62','\u2A63','\u2A64','\u2A65','\u2A66','\u2A67','\u2A68','\u2A69','\u2A6A','\u2A6B','\u2A6C','\u2A6D','\u2A6E','\u2A6F','\u2A70','\u2A71','\u2A72','\u2A73','\u2A74','\u2A75','\u2A76','\u2A77','\u2A78','\u2A79','\u2A7A','\u2A7B','\u2A7C','\u2A7D','\u2A7E','\u2A7F','\u2A80','\u2A81','\u2A82','\u2A83','\u2A84','\u2A85','\u2A86','\u2A87','\u2A88','\u2A89','\u2A8A','\u2A8B','\u2A8C','\u2A8D','\u2A8E','\u2A8F','\u2A90','\u2A91','\u2A92','\u2A93','\u2A94','\u2A95','\u2A96','\u2A97','\u2A98','\u2A99','\u2A9A','\u2A9B','\u2A9C','\u2A9D','\u2A9E','\u2A9F','\u2AA0','\u2AA1','\u2AA2','\u2AA3','\u2AA4','\u2AA5','\u2AA6','\u2AA7','\u2AA8','\u2AA9','\u2AAA','\u2AAB','\u2AAC','\u2AAD','\u2AAE','\u2AAF','\u2AB0','\u2AB1','\u2AB2','\u2AB3','\u2AB4','\u2AB5','\u2AB6','\u2AB7','\u2AB8','\u2AB9','\u2ABA','\u2ABB','\u2ABC','\u2ABD','\u2ABE','\u2ABF','\u2AC0','\u2AC1','\u2AC2','\u2AC3','\u2AC4','\u2AC5','\u2AC6','\u2AC7','\u2AC8','\u2AC9','\u2ACA','\u2ACB','\u2ACC','\u2ACD','\u2ACE','\u2ACF','\u2AD0','\u2AD1','\u2AD2','\u2AD3','\u2AD4','\u2AD5','\u2AD6','\u2AD7','\u2AD8','\u2AD9','\u2ADA','\u2ADB','\u2ADC','\u2ADD','\u2ADE','\u2ADF','\u2AE0','\u2AE1','\u2AE2','\u2AE3','\u2AE4','\u2AE5','\u2AE6','\u2AE7','\u2AE8','\u2AE9','\u2AEA','\u2AEB','\u2AEC','\u2AED','\u2AEE','\u2AEF','\u2AF0','\u2AF1','\u2AF2','\u2AF3','\u2AF4','\u2AF5','\u2AF6','\u2AF7','\u2AF8','\u2AF9','\u2AFA','\u2AFB','\u2AFC','\u2AFD','\u2AFE','\u2AFF','\u2B00','\u2B01','\u2B02','\u2B03','\u2B04','\u2B05','\u2B06','\u2B07','\u2B08','\u2B09','\u2B0A','\u2B0B','\u2B0C','\u2B0D','\u2B0E','\u2B0F','\u2B10','\u2B11','\u2B12','\u2B13','\u2B14','\u2B15','\u2B16','\u2B17','\u2B18','\u2B19','\u2B1A','\u2B1B','\u2B1C','\u2B1D','\u2B1E','\u2B1F','\u2B20','\u2B21','\u2B22','\u2B23','\u2B24','\u2B25','\u2B26','\u2B27','\u2B28','\u2B29','\u2B2A','\u2B2B','\u2B2C','\u2B2D','\u2B2E','\u2B2F','\u2B30','\u2B31','\u2B32','\u2B33','\u2B34','\u2B35','\u2B36','\u2B37','\u2B38','\u2B39','\u2B3A','\u2B3B','\u2B3C','\u2B3D','\u2B3E','\u2B3F','\u2B40','\u2B41','\u2B42','\u2B43','\u2B44','\u2B45','\u2B46','\u2B47','\u2B48','\u2B49','\u2B4A','\u2B4B','\u2B4C','\u2B50','\u2B51','\u2B52','\u2B53','\u2B54','\u2B55','\u2B56','\u2B57','\u2B58','\u2B59','\u2CE5','\u2CE6','\u2CE7','\u2CE8','\u2CE9','\u2CEA','\u2CF9','\u2CFA','\u2CFB','\u2CFC','\u2CFE','\u2CFF','\u2D70','\u2E00','\u2E01','\u2E02','\u2E03','\u2E04','\u2E05','\u2E06','\u2E07','\u2E08','\u2E09','\u2E0A','\u2E0B','\u2E0C','\u2E0D','\u2E0E','\u2E0F','\u2E10','\u2E11','\u2E12','\u2E13','\u2E14','\u2E15','\u2E16','\u2E17','\u2E18','\u2E19','\u2E1A','\u2E1B','\u2E1C','\u2E1D','\u2E1E','\u2E1F','\u2E20','\u2E21','\u2E22','\u2E23','\u2E24','\u2E25','\u2E26','\u2E27','\u2E28','\u2E29','\u2E2A','\u2E2B','\u2E2C','\u2E2D','\u2E2E','\u2E30','\u2E31','\u2E32','\u2E33','\u2E34','\u2E35','\u2E36','\u2E37','\u2E38','\u2E39','\u2E3A','\u2E3B','\u2E80','\u2E81','\u2E82','\u2E83','\u2E84','\u2E85','\u2E86','\u2E87','\u2E88','\u2E89','\u2E8A','\u2E8B','\u2E8C','\u2E8D','\u2E8E','\u2E8F','\u2E90','\u2E91','\u2E92','\u2E93','\u2E94','\u2E95','\u2E96','\u2E97','\u2E98','\u2E99','\u2E9B','\u2E9C','\u2E9D','\u2E9E','\u2E9F','\u2EA0','\u2EA1','\u2EA2','\u2EA3','\u2EA4','\u2EA5','\u2EA6','\u2EA7','\u2EA8','\u2EA9','\u2EAA','\u2EAB','\u2EAC','\u2EAD','\u2EAE','\u2EAF','\u2EB0','\u2EB1','\u2EB2','\u2EB3','\u2EB4','\u2EB5','\u2EB6','\u2EB7','\u2EB8','\u2EB9','\u2EBA','\u2EBB','\u2EBC','\u2EBD','\u2EBE','\u2EBF','\u2EC0','\u2EC1','\u2EC2','\u2EC3','\u2EC4','\u2EC5','\u2EC6','\u2EC7','\u2EC8','\u2EC9','\u2ECA','\u2ECB','\u2ECC','\u2ECD','\u2ECE','\u2ECF','\u2ED0','\u2ED1','\u2ED2','\u2ED3','\u2ED4','\u2ED5','\u2ED6','\u2ED7','\u2ED8','\u2ED9','\u2EDA','\u2EDB','\u2EDC','\u2EDD','\u2EDE','\u2EDF','\u2EE0','\u2EE1','\u2EE2','\u2EE3','\u2EE4','\u2EE5','\u2EE6','\u2EE7','\u2EE8','\u2EE9','\u2EEA','\u2EEB','\u2EEC','\u2EED','\u2EEE','\u2EEF','\u2EF0','\u2EF1','\u2EF2','\u2EF3','\u2F00','\u2F01','\u2F02','\u2F03','\u2F04','\u2F05','\u2F06','\u2F07','\u2F08','\u2F09','\u2F0A','\u2F0B','\u2F0C','\u2F0D','\u2F0E','\u2F0F','\u2F10','\u2F11','\u2F12','\u2F13','\u2F14','\u2F15','\u2F16','\u2F17','\u2F18','\u2F19','\u2F1A','\u2F1B','\u2F1C','\u2F1D','\u2F1E','\u2F1F','\u2F20','\u2F21','\u2F22','\u2F23','\u2F24','\u2F25','\u2F26','\u2F27','\u2F28','\u2F29','\u2F2A','\u2F2B','\u2F2C','\u2F2D','\u2F2E','\u2F2F','\u2F30','\u2F31','\u2F32','\u2F33','\u2F34','\u2F35','\u2F36','\u2F37','\u2F38','\u2F39','\u2F3A','\u2F3B','\u2F3C','\u2F3D','\u2F3E','\u2F3F','\u2F40','\u2F41','\u2F42','\u2F43','\u2F44','\u2F45','\u2F46','\u2F47','\u2F48','\u2F49','\u2F4A','\u2F4B','\u2F4C','\u2F4D','\u2F4E','\u2F4F','\u2F50','\u2F51','\u2F52','\u2F53','\u2F54','\u2F55','\u2F56','\u2F57','\u2F58','\u2F59','\u2F5A','\u2F5B','\u2F5C','\u2F5D','\u2F5E','\u2F5F','\u2F60','\u2F61','\u2F62','\u2F63','\u2F64','\u2F65','\u2F66','\u2F67','\u2F68','\u2F69','\u2F6A','\u2F6B','\u2F6C','\u2F6D','\u2F6E','\u2F6F','\u2F70','\u2F71','\u2F72','\u2F73','\u2F74','\u2F75','\u2F76','\u2F77','\u2F78','\u2F79','\u2F7A','\u2F7B','\u2F7C','\u2F7D','\u2F7E','\u2F7F','\u2F80','\u2F81','\u2F82','\u2F83','\u2F84','\u2F85','\u2F86','\u2F87','\u2F88','\u2F89','\u2F8A','\u2F8B','\u2F8C','\u2F8D','\u2F8E','\u2F8F','\u2F90','\u2F91','\u2F92','\u2F93','\u2F94','\u2F95','\u2F96','\u2F97','\u2F98','\u2F99','\u2F9A','\u2F9B','\u2F9C','\u2F9D','\u2F9E','\u2F9F','\u2FA0','\u2FA1','\u2FA2','\u2FA3','\u2FA4','\u2FA5','\u2FA6','\u2FA7','\u2FA8','\u2FA9','\u2FAA','\u2FAB','\u2FAC','\u2FAD','\u2FAE','\u2FAF','\u2FB0','\u2FB1','\u2FB2','\u2FB3','\u2FB4','\u2FB5','\u2FB6','\u2FB7','\u2FB8','\u2FB9','\u2FBA','\u2FBB','\u2FBC','\u2FBD','\u2FBE','\u2FBF','\u2FC0','\u2FC1','\u2FC2','\u2FC3','\u2FC4','\u2FC5','\u2FC6','\u2FC7','\u2FC8','\u2FC9','\u2FCA','\u2FCB','\u2FCC','\u2FCD','\u2FCE','\u2FCF','\u2FD0','\u2FD1','\u2FD2','\u2FD3','\u2FD4','\u2FD5','\u2FF0','\u2FF1','\u2FF2','\u2FF3','\u2FF4','\u2FF5','\u2FF6','\u2FF7','\u2FF8','\u2FF9','\u2FFA','\u2FFB','\u3001','\u3002','\u3003','\u3004','\u3008','\u3009','\u300A','\u300B','\u300C','\u300D','\u300E','\u300F','\u3010','\u3011','\u3012','\u3013','\u3014','\u3015','\u3016','\u3017','\u3018','\u3019','\u301A','\u301B','\u301C','\u301D','\u301E','\u301F','\u3020','\u3030','\u3036','\u3037','\u303D','\u303E','\u309B','\u309C','\u30A0','\u30FB','\u3190','\u3191','\u3196','\u3197','\u3198','\u3199','\u319A','\u319B','\u319C','\u319D','\u319E','\u319F','\u31C0','\u31C1','\u31C2','\u31C3','\u31C4','\u31C5','\u31C6','\u31C7','\u31C8','\u31C9','\u31CA','\u31CB','\u31CC','\u31CD','\u31CE','\u31CF','\u31D0','\u31D1','\u31D2','\u31D3','\u31D4','\u31D5','\u31D6','\u31D7','\u31D8','\u31D9','\u31DA','\u31DB','\u31DC','\u31DD','\u31DE','\u31DF','\u31E0','\u31E1','\u31E2','\u31E3','\u3200','\u3201','\u3202','\u3203','\u3204','\u3205','\u3206','\u3207','\u3208','\u3209','\u320A','\u320B','\u320C','\u320D','\u320E','\u320F','\u3210','\u3211','\u3212','\u3213','\u3214','\u3215','\u3216','\u3217','\u3218','\u3219','\u321A','\u321B','\u321C','\u321D','\u321E','\u322A','\u322B','\u322C','\u322D','\u322E','\u322F','\u3230','\u3231','\u3232','\u3233','\u3234','\u3235','\u3236','\u3237','\u3238','\u3239','\u323A','\u323B','\u323C','\u323D','\u323E','\u323F','\u3240','\u3241','\u3242','\u3243','\u3244','\u3245','\u3246','\u3247','\u3250','\u3260','\u3261','\u3262','\u3263','\u3264','\u3265','\u3266','\u3267','\u3268','\u3269','\u326A','\u326B','\u326C','\u326D','\u326E','\u326F','\u3270','\u3271','\u3272','\u3273','\u3274','\u3275','\u3276','\u3277','\u3278','\u3279','\u327A','\u327B','\u327C','\u327D','\u327E','\u327F','\u328A','\u328B','\u328C','\u328D','\u328E','\u328F','\u3290','\u3291','\u3292','\u3293','\u3294','\u3295','\u3296','\u3297','\u3298','\u3299','\u329A','\u329B','\u329C','\u329D','\u329E','\u329F','\u32A0','\u32A1','\u32A2','\u32A3','\u32A4','\u32A5','\u32A6','\u32A7','\u32A8','\u32A9','\u32AA','\u32AB','\u32AC','\u32AD','\u32AE','\u32AF','\u32B0','\u32C0','\u32C1','\u32C2','\u32C3','\u32C4','\u32C5','\u32C6','\u32C7','\u32C8','\u32C9','\u32CA','\u32CB','\u32CC','\u32CD','\u32CE','\u32CF','\u32D0','\u32D1','\u32D2','\u32D3','\u32D4','\u32D5','\u32D6','\u32D7','\u32D8','\u32D9','\u32DA','\u32DB','\u32DC','\u32DD','\u32DE','\u32DF','\u32E0','\u32E1','\u32E2','\u32E3','\u32E4','\u32E5','\u32E6','\u32E7','\u32E8','\u32E9','\u32EA','\u32EB','\u32EC','\u32ED','\u32EE','\u32EF','\u32F0','\u32F1','\u32F2','\u32F3','\u32F4','\u32F5','\u32F6','\u32F7','\u32F8','\u32F9','\u32FA','\u32FB','\u32FC','\u32FD','\u32FE','\u3300','\u3301','\u3302','\u3303','\u3304','\u3305','\u3306','\u3307','\u3308','\u3309','\u330A','\u330B','\u330C','\u330D','\u330E','\u330F','\u3310','\u3311','\u3312','\u3313','\u3314','\u3315','\u3316','\u3317','\u3318','\u3319','\u331A','\u331B','\u331C','\u331D','\u331E','\u331F','\u3320','\u3321','\u3322','\u3323','\u3324','\u3325','\u3326','\u3327','\u3328','\u3329','\u332A','\u332B','\u332C','\u332D','\u332E','\u332F','\u3330','\u3331','\u3332','\u3333','\u3334','\u3335','\u3336','\u3337','\u3338','\u3339','\u333A','\u333B','\u333C','\u333D','\u333E','\u333F','\u3340','\u3341','\u3342','\u3343','\u3344','\u3345','\u3346','\u3347','\u3348','\u3349','\u334A','\u334B','\u334C','\u334D','\u334E','\u334F','\u3350','\u3351','\u3352','\u3353','\u3354','\u3355','\u3356','\u3357','\u3358','\u3359','\u335A','\u335B','\u335C','\u335D','\u335E','\u335F','\u3360','\u3361','\u3362','\u3363','\u3364','\u3365','\u3366','\u3367','\u3368','\u3369','\u336A','\u336B','\u336C','\u336D','\u336E','\u336F','\u3370','\u3371','\u3372','\u3373','\u3374','\u3375','\u3376','\u3377','\u3378','\u3379','\u337A','\u337B','\u337C','\u337D','\u337E','\u337F','\u3380','\u3381','\u3382','\u3383','\u3384','\u3385','\u3386','\u3387','\u3388','\u3389','\u338A','\u338B','\u338C','\u338D','\u338E','\u338F','\u3390','\u3391','\u3392','\u3393','\u3394','\u3395','\u3396','\u3397','\u3398','\u3399','\u339A','\u339B','\u339C','\u339D','\u339E','\u339F','\u33A0','\u33A1','\u33A2','\u33A3','\u33A4','\u33A5','\u33A6','\u33A7','\u33A8','\u33A9','\u33AA','\u33AB','\u33AC','\u33AD','\u33AE','\u33AF','\u33B0','\u33B1','\u33B2','\u33B3','\u33B4','\u33B5','\u33B6','\u33B7','\u33B8','\u33B9','\u33BA','\u33BB','\u33BC','\u33BD','\u33BE','\u33BF','\u33C0','\u33C1','\u33C2','\u33C3','\u33C4','\u33C5','\u33C6','\u33C7','\u33C8','\u33C9','\u33CA','\u33CB','\u33CC','\u33CD','\u33CE','\u33CF','\u33D0','\u33D1','\u33D2','\u33D3','\u33D4','\u33D5','\u33D6','\u33D7','\u33D8','\u33D9','\u33DA','\u33DB','\u33DC','\u33DD','\u33DE','\u33DF','\u33E0','\u33E1','\u33E2','\u33E3','\u33E4','\u33E5','\u33E6','\u33E7','\u33E8','\u33E9','\u33EA','\u33EB','\u33EC','\u33ED','\u33EE','\u33EF','\u33F0','\u33F1','\u33F2','\u33F3','\u33F4','\u33F5','\u33F6','\u33F7','\u33F8','\u33F9','\u33FA','\u33FB','\u33FC','\u33FD','\u33FE','\u33FF','\u4DC0','\u4DC1','\u4DC2','\u4DC3','\u4DC4','\u4DC5','\u4DC6','\u4DC7','\u4DC8','\u4DC9','\u4DCA','\u4DCB','\u4DCC','\u4DCD','\u4DCE','\u4DCF','\u4DD0','\u4DD1','\u4DD2','\u4DD3','\u4DD4','\u4DD5','\u4DD6','\u4DD7','\u4DD8','\u4DD9','\u4DDA','\u4DDB','\u4DDC','\u4DDD','\u4DDE','\u4DDF','\u4DE0','\u4DE1','\u4DE2','\u4DE3','\u4DE4','\u4DE5','\u4DE6','\u4DE7','\u4DE8','\u4DE9','\u4DEA','\u4DEB','\u4DEC','\u4DED','\u4DEE','\u4DEF','\u4DF0','\u4DF1','\u4DF2','\u4DF3','\u4DF4','\u4DF5','\u4DF6','\u4DF7','\u4DF8','\u4DF9','\u4DFA','\u4DFB','\u4DFC','\u4DFD','\u4DFE','\u4DFF','\uA490','\uA491','\uA492','\uA493','\uA494','\uA495','\uA496','\uA497','\uA498','\uA499','\uA49A','\uA49B','\uA49C','\uA49D','\uA49E','\uA49F','\uA4A0','\uA4A1','\uA4A2','\uA4A3','\uA4A4','\uA4A5','\uA4A6','\uA4A7','\uA4A8','\uA4A9','\uA4AA','\uA4AB','\uA4AC','\uA4AD','\uA4AE','\uA4AF','\uA4B0','\uA4B1','\uA4B2','\uA4B3','\uA4B4','\uA4B5','\uA4B6','\uA4B7','\uA4B8','\uA4B9','\uA4BA','\uA4BB','\uA4BC','\uA4BD','\uA4BE','\uA4BF','\uA4C0','\uA4C1','\uA4C2','\uA4C3','\uA4C4','\uA4C5','\uA4C6','\uA4FE','\uA4FF','\uA60D','\uA60E','\uA60F','\uA673','\uA67E','\uA6F2','\uA6F3','\uA6F4','\uA6F5','\uA6F6','\uA6F7','\uA700','\uA701','\uA702','\uA703','\uA704','\uA705','\uA706','\uA707','\uA708','\uA709','\uA70A','\uA70B','\uA70C','\uA70D','\uA70E','\uA70F','\uA710','\uA711','\uA712','\uA713','\uA714','\uA715','\uA716','\uA720','\uA721','\uA789','\uA78A','\uA828','\uA829','\uA82A','\uA82B','\uA836','\uA837','\uA839','\uA874','\uA875','\uA876','\uA877','\uA8CE','\uA8CF','\uA8F8','\uA8F9','\uA8FA','\uA92E','\uA92F','\uA95F','\uA9C1','\uA9C2','\uA9C3','\uA9C4','\uA9C5','\uA9C6','\uA9C7','\uA9C8','\uA9C9','\uA9CA','\uA9CB','\uA9CC','\uA9CD','\uA9DE','\uA9DF','\uAA5C','\uAA5D','\uAA5E','\uAA5F','\uAA77','\uAA78','\uAA79','\uAADE','\uAADF','\uAAF0','\uAAF1','\uABEB','\uFB29','\uFBB2','\uFBB3','\uFBB4','\uFBB5','\uFBB6','\uFBB7','\uFBB8','\uFBB9','\uFBBA','\uFBBB','\uFBBC','\uFBBD','\uFBBE','\uFBBF','\uFBC0','\uFBC1','\uFD3E','\uFD3F','\uFDFD','\uFE10','\uFE11','\uFE12','\uFE13','\uFE14','\uFE15','\uFE16','\uFE17','\uFE18','\uFE19','\uFE30','\uFE31','\uFE32','\uFE33','\uFE34','\uFE35','\uFE36','\uFE37','\uFE38','\uFE39','\uFE3A','\uFE3B','\uFE3C','\uFE3D','\uFE3E','\uFE3F','\uFE40','\uFE41','\uFE42','\uFE43','\uFE44','\uFE45','\uFE46','\uFE47','\uFE48','\uFE49','\uFE4A','\uFE4B','\uFE4C','\uFE4D','\uFE4E','\uFE4F','\uFE50','\uFE51','\uFE52','\uFE54','\uFE55','\uFE56','\uFE57','\uFE58','\uFE59','\uFE5A','\uFE5B','\uFE5C','\uFE5D','\uFE5E','\uFE5F','\uFE60','\uFE61','\uFE62','\uFE63','\uFE64','\uFE65','\uFE66','\uFE68','\uFE6A','\uFE6B','\uFF01','\uFF02','\uFF03','\uFF05','\uFF06','\uFF07','\uFF08','\uFF09','\uFF0A','\uFF0B','\uFF0C','\uFF0D','\uFF0E','\uFF0F','\uFF1A','\uFF1B','\uFF1C','\uFF1D','\uFF1E','\uFF1F','\uFF20','\uFF3B','\uFF3C','\uFF3D','\uFF3E','\uFF3F','\uFF40','\uFF5B','\uFF5C','\uFF5D','\uFF5E','\uFF5F','\uFF60','\uFF61','\uFF62','\uFF63','\uFF64','\uFF65','\uFFE2','\uFFE3','\uFFE4','\uFFE8','\uFFE9','\uFFEA','\uFFEB','\uFFEC','\uFFED','\uFFEE','\uFFFC','\uFFFD','\u2420','\u303f','\u1361'};
  private static Set<Character> punctChars = null;

  static final String cleanWord(String prefix)
  {
    if (punctChars == null)
    {
      punctChars = new HashSet<>();

      for (char c : punctStr.toCharArray())
        punctChars.add(c);
      for (char c : punctStr2)
        punctChars.add(c);
    }

    //if (prefix.charAt(0) == ' ')
    //  prefix = prefix.substring(1);

    int l = prefix.length();

    if (l == 0)
      return prefix;

    char ch = prefix.charAt(l - 1);

    if (ch == ' ' || punctChars.contains(ch))
      return trim(prefix.substring(0, l - 1));

    /*
    for (char c : patStrCoreArr)
    {
      if (ch == c)
      {
        prefix = prefix.substring(0, l - 1);

        break;
      }
    }
    */

    //return prefix;
    return trim(prefix);
  }

  private boolean prefixWord(final String prefix)
  {
    if (wordMap.containsKey(prefix))
      return true;

    String lc = cleanWord(prefix).toLowerCase();

    return wordMap.containsKey(lc);
  }

  private static final String pres = "AB:AL:B:BA:BB:BD:BH:BL:BN:BR:BS:BT:CA:CB:CF:CH:CM:CO:CR:CT:CV:CW:DA:DD:DE:DG:DH:DL:DN:DT:DY:E:EC:EH:EN:EX:FK:FY:G::GL:GU:HA:HD:HG:HP:HR:HU:HX:IG:IP:IV:KA:KT:KW:KY:L:LA:LD:LE:LL:LN:LS:LU:M:ME:MK:ML:N::NE:NG:NN:NP:NR:NW:OL:OX:PA:PE:PH:PL:PO:PR:RG:RH:RM:S::SA:SE:SG:SK:SL:SM:SN:SO:SP:SR:SS:ST:SW:SY:TA:TD:TF:TN:TQ:TR:TS:TW:UB:W:WA:WC:WD:WF:WN:WR:WS:WV:YO:ZE:GY:IM:JE:HS";

  private static boolean isPostcode(String postcode)
  {
    int state = 0;
    String pre = "";
    int len = postcode.length();

    try
    {
     loop :
      for (int i = 0; i != len; i++)
      {
        char ch = postcode.charAt(i);

        switch (state)
	{
	  case 0 :
	    if (! Character.isLetter(ch))
	      return false;
	    state = 1;
            pre += ch;
	    break;
	  case 1 :
	    if      (Character.isLetter(ch))
            {
	      state = 2;
              pre += ch;
            }
	    else if (Character.isDigit(ch))
	      state = 3;
	    else
	      return false;
	    break;
	  case 2 :
	    if (! Character.isDigit(ch))
	      return false;
	    state = 3;
	    break;
	  case 3 :
	    if      (Character.isSpaceChar(ch))
	      state = 5;
	    else if (Character.isLetter(ch))
	    {
	      state = 4;
	    }
	    else if (Character.isDigit(ch))
            {
              if ((i == 2 && postcode.length() == 5) ||
	          (i == 3 && postcode.length() == 6))
	        state = 6;
              else
	        state = 4;
            }
	    else
	      return false;
	    break;
	  case 4 :
	    if (! Character.isSpaceChar(ch))
	    {
	      if (! Character.isDigit(ch))
	        return false;
	      state = 6;
	    }
	    else
	      state = 5;
	    break;
	  case 5 :
	    if (! Character.isDigit(ch))
	      return false;
	    state = 6;
	    break;
	  case 6 :
	    if (! Character.isLetter(ch))
	      return false;
	    state = 7;
	    break;
	  case 7 :
	    if (! Character.isLetter(ch))
	      return false;
	    if (i != postcode.length() - 1)
	      return false;
            state = 8;
	    break loop;
	}
      }
    }
    catch (Exception e)
    {
      return false;
    }

    if (state != 8)
      return false;

    if (pres.indexOf(pre) == -1)
      return false;

    return true;
  }
}

@parser::members
{
  private String name;
  private Map<String,String[]> wordMap = new TreeMap<>();
  private Map<String,String[]> csWordMap = wordMap;
  private Map<String,Object> env = null;
  private PatriciaTrie<Collection<String>> pt = null;

  public void setWordMap(Map<String,String[]> wordMap, Map<String,String[]> csWordMap)
  {
    if (wordMap != null)
    {
      this.wordMap = wordMap;
      this.csWordMap = csWordMap;
    }
  }

  private static final String initCap(final String str)
  {
    if (str == null)
      return "";

    StringBuilder sb = new StringBuilder(str);
    boolean first = true;
    int len = sb.length();

    for (int i = 0; i != len; i++)
    {
      char ch = sb.charAt(i);

      if (ch == '_')
      {
        sb.setCharAt(i, ' ');

        first = true;
      }
      else if (Character.isWhitespace(ch) || ch == '.' || ch == '-')
        first = true;
      else if (first)
      {
        if (Character.isLowerCase(ch))
          sb.setCharAt(i, Character.toUpperCase(ch));

        first = false;
      }
      else
      {
        if (Character.isUpperCase(ch))
          sb.setCharAt(i, Character.toLowerCase(ch));
      }
    }

    return sb.toString();
  }

  private static Collection<String> getPhrases(String words)
  {
    words = words.trim();

    int len = words.length();
    String[] ws = words.split("\\s");

    List<String> wds = new ArrayList<>(15);

    for (int i = 0; i != ws.length; i++)
    {
      for (int j = i; j != ws.length; j++)
      {
        StringBuilder sb = new StringBuilder();

        for (int k = i; k <= j; k++)
        {
          if (k != i)
            sb.append(" ");

          sb.append(ws[k]);
        }
        
        String w = sb.toString();

        if (w.length() < len)
          wds.add(w);
      }
    }

    return wds;
  }

  public void setStar(PatriciaTrie<Collection<String>> star)
  {
    pt = star;
  }

  public void setEnv(Map<String,Object> env)
  {
    this.env = env;
  }

  private Map<String,Map<String,Short>> words = new HashMap<>();
  //private StringBuilder b64;

  private void addToWords(String value, boolean lc)
  {
    String[] maps = wordMap.get(value);

    if (maps != null)
    {
      for (String type : maps)
      {
        if (lc)
          addResult("%" + type, value);
        else
          addResult(type, value);
      }
    }
  }

  private void addResult(String type, String value)
  {
    Map<String,Short> hits = words.get(type);
    short vals = 1;

    if (hits == null)
    {
      hits = new CountMap<>();

      words.put(type, hits);

      hits.put(value, vals);
    }
    else if (hits.containsKey(value))
      hits.replace(value, vals += hits.get(value));
    else
      hits.put(value, vals);
  }

  private Word addWordList(String key)
  {
    return addWordList(key, true);
  }

  private Word addWordList(String key, boolean inc)
  {
    Word w = new Word(key, wordCnt, sentenceCnt);

    //if (! posMap.containsKey(wordCnt))
    //  posMap.put(wordCnt, wordList.size());

    wordList.add(w);

    if (inc)
      wordCnt++;

    if (mapOfWords.containsKey(key))
    {
      w.next = mapOfWords.get(key);

      mapOfWords.replace(key, w);
    }
    else
      mapOfWords.put(key, w);

    return w;
  }

  public Map<String,Map<String,Short>> getResults()
  {
    return words;
  }

  private boolean prefixWord(final String prefix)
  {
    if (wordMap.containsKey(prefix))
      return true;

    String lc = TextLexer.cleanWord(prefix).toLowerCase();

    return wordMap.containsKey(lc);
  }

  public List<Word> wordList = new ArrayList<>(100);
  public Map<String,Word> mapOfWords = new HashMap<>();
  //public LongHashMap<Integer> posMap= new LongHashMap<>(100);
  public int wordCnt = 0;
  public int sentenceCnt = 0;

  private boolean isProperNoun(final String phrase)
  {
    int l = phrase.length();

    // Note : Length check first as might be zero
    if (l < 3 || ! Character.isUpperCase(phrase.charAt(0)) || ! Character.isLetter(phrase.charAt(l - 1)))
      return false;

    return true;
  }

  private void hasStem(final String lcKey, final String key)
  {
    if (pt != null)
    {
      String tKey = pt.selectKey(lcKey);

      if (tKey != null && lcKey.startsWith(tKey))
      {
        //addResult("stems", key);
        addResult("named", lcKey);

        for (String l : pt.get(tKey))
        {
          //if (! key.equals(lcKey))
            addResult("%" + l, lcKey);
          addResult(l, key);
        }
      }
    }
  }
}

re : WS? (doAll WS?)* ;

doAll
    : CC
      {
        String key = TextLexer.getDigits($CC.text);

        addResult("cc", key);
        addWordList(key);
      }
    | POSTCODE
      {
        String key = $POSTCODE.text;

        addResult("postcode", key);
        addWordList(key);
      }
    /*
    | NPOSTCODE
      {
        addResult("postcode", TextLexer.trim($NPOSTCODE.text));
      }
    | INTEGER
      {
        addResult("int", TextLexer.trim($INTEGER.text));
      }
    | LONGINT
      {
        addResult("long", TextLexer.trim($LONGINT.text));
      }
    */
    | DATETIME
      {
        String key = $DATETIME.text;

        addWordList(key);

        String[] bits = key.split("[T ]");

        addResult("date", bits[0].substring(0,4) + bits[0].substring(5,7) + bits[0].substring(8));
        addResult("time", bits[1]);
      }
    | SHORTDATE
      {
        String key = $SHORTDATE.text;

        addResult("date", key);
        addWordList(key);
      }
    | TIME
      {
        String key = $TIME.text;

        addResult("time", key);
        addWordList(key);
      }
    | FLOAT
      {
        String key = TextLexer.trim($FLOAT.text);

        addResult("float", key);
        addWordList(key);
      }
    | URL
      {
        String key = TextLexer.trim($URL.text);
        String lcKey = key.toLowerCase();

        addWordList(lcKey);

        if (csWordMap.containsKey(key))
          addToWords(key, false);

        addToWords(lcKey, true);

        if (! "http://t.co".equals(key))
          addResult("url", key);

        URI uri = URI.create(key);
        String host = uri.getHost();
        String surl = (new URI(uri.getScheme() + "://" + uri.getHost())).toString();

        if (key.contains("?"))
          key = key.substring(0, key.indexOf("?"));

        String url = URI.create(key).toString();

        if (csWordMap.containsKey(host))
          addToWords(host, false);

        addToWords(host, true);

        addResult("domain", host);

        if (csWordMap.containsKey(url))
          addToWords(url, false);

        addToWords(url, true);

        if (! "http://t.co".equals(url))
          addResult("url", url);

        if (csWordMap.containsKey(surl))
          addToWords(surl, false);

        addToWords(surl, true);

        if (! "http://t.co".equals(surl))
          addResult("uri", surl);
      }
    | IP
      {
        String key = TextLexer.trim($IP.text);

        addWordList(key);

        addToWords(key, false);
        addToWords(key, true);

        addResult("ip", key);
        //addResult("web", key);
      }
    | DOMAIN
      {
        String key = TextLexer.trim($DOMAIN.text);
        String lcKey = key.toLowerCase();

        addWordList(lcKey);

        if (csWordMap.containsKey(key))
          addToWords(key, false);

        addToWords(lcKey, true);

        addResult("domain", key);

        if (key.contains("."))
        {
          // Assume http!
          String url = URI.create("http://" + key).toString();

          if (csWordMap.containsKey(url))
            addToWords(url, false);

          addToWords(url, true);

          if (! "http://t.co".equals(url))
            addResult("url", url);
        }
      }
    | WORDS
      {
        String origKey = TextLexer.trim($WORDS.text);
        String key = TextLexer.cleanWord(origKey);
        String lcKey = key.toLowerCase();

        if (csWordMap.containsKey(key))
        {
          addResult("named", key);
          addToWords(key, false);
        }
        else
          addResult("named", lcKey);

        addToWords(lcKey, true);

        addWordList(lcKey);

        // Add punctuation if any
        if (key.length() < origKey.length())
        {
          String endChar = origKey.substring(origKey.length() - 1);

          addWordList(endChar, false);

          if (".?!".contains(endChar))
            sentenceCnt++;
        }

        if (isProperNoun(key))
          addResult("pnouns", key);

        // The individual words may be interesting too!
        if (lcKey.contains(" "))
        {
          boolean hasOne = false;

          for (String k : lcKey.split(" "))
          {
            if (wordMap.containsKey(k))
            {
              String ss = null;

              addResult("named", k);
              addToWords(k, true);

              hasOne = true;
            }
          }

          if (hasOne)
          {
            for (String k : key.split(" "))
            {
              if (csWordMap.containsKey(k))
              {
                if (isProperNoun(k))
                  addResult("pnouns", k);

                addResult("named", k);
                addToWords(k, false);
              }
            }
          }
        }
      }
    | WORD
      {
        String origKey = TextLexer.trim($WORD.text);

        if (origKey.length() == 10 && origKey.charAt(4) == '-' && origKey.charAt(7) == '-' && origKey.matches("2[0-3][0-9][0-9]-[0-1][0-9]-[0-3][0-3]"))
        {
          addResult("date", origKey.substring(0,4) + origKey.substring(5,7) + origKey.substring(8));
        }
        else if (origKey.length() == 8 && Character.isDigit(origKey.charAt(0)) && origKey.matches("2[0-3][0-9][0-9][0-1][0-9][0-3][0-3]"))
        {
          addResult("date", origKey);
        }

        if (origKey.matches("\\*\\*\\*\\*[a-zA-Z0-9_]+\\*\\*\\*\\*"))
          wordCnt += 10000000;
        else
        {
          // Might be cards embedded in text!
          if (origKey.length() > 12 && Character.isDigit(origKey.charAt(0)) && TextLexer.isValidLuhn(origKey))
          {
            String cckey = TextLexer.getDigits($WORD.text);

            addResult("cc", cckey);
            addWordList(cckey, false);

            origKey = origKey.substring(cckey.length());
          }

          String key = TextLexer.cleanWord(origKey);
          String lcKey = key.toLowerCase();

          String ss = null;

          addWordList(lcKey);

          // Add punctuation if any
          if (key.length() < origKey.length())
          {
            String endChar = origKey.substring(origKey.length() - 1);

            addWordList(endChar, false);

            if (".?!".contains(endChar))
              sentenceCnt++;
          }

          if (isProperNoun(key))
            addResult("pnouns", key);

          hasStem(lcKey, key);
        }
      }
    | INITCAPS
      {
        String origKey = TextLexer.trim($INITCAPS.text);
        String key = TextLexer.cleanWord(origKey);

        if (key.isEmpty())
          break;

        String lcKey = key.toLowerCase();
        boolean found = false;
        List<String> mK = null;

        // Check fragments
        if (lcKey.contains(" "))
        {
          List<String> al = new ArrayList<>();

          mK = new ArrayList<>();

          wordCnt++;

          for (String k : getPhrases(lcKey))
          {
            if (! k.contains(" "))
              hasStem(k, initCap(k));

            if (prefixWord(k))
            {
              String lk = initCap(k);

              if (csWordMap.containsKey(k))
              {
                addResult("named", k);
              }
              else
              {
                addToWords(lk, false);
                addResult("named", lk);
              }

              //addWordList(k, false);
              mK.add(k);

              addToWords(k, true);

              addResult("pnouns", lk);

              found = true;
            }
            else if (! k.contains(" "))
            {
              al.add(k);
              mK.add(k);
            }
          }

          if (! found)
          {
            for (String k : al)
            {
              addWordList(k, false);

              wordCnt++;
            }
          }
          else
          {
            List<String> dl = new ArrayList<>();

            for (String l : mK)
            {
              for (String k : al)
              {
                if (! l.equals(k) && l.contains(k))
                  dl.add(k);
              }
            }

            mK.removeAll(dl);

            for (String k : mK)
            {
              addWordList(k, false);

              wordCnt++;
            }
          }
        }

        if (! found)
        {
          if (mK != null)
            wordCnt -= (mK.size() + 1) / 2;
          else
            wordCnt++;

          if (csWordMap.containsKey(lcKey))
          {
            addResult("named", key);
            addToWords(key, false);
          }
          else
            addResult("named", lcKey);

          addToWords(lcKey, true);
          //wordCnt++;

          addWordList(lcKey, false);

          if (mK != null)
            wordCnt += mK.size() / 2;
        }

        // Add punctuation if any
        if (key.length() < origKey.length())
        {
          String endChar = origKey.substring(origKey.length() - 1);

          addWordList(endChar, false);

          if (".?!".contains(endChar))
            sentenceCnt++;
        }

        if (! found)
        {
          if (! References.isReference("stopwords", lcKey))
            addResult("pnouns", key);
        }

        wordCnt++;
      }
    | ATAG
      {
        String key = TextLexer.trim($ATAG.text);
        String lcKey = key.toLowerCase();

        addWordList(lcKey);

        if (csWordMap.containsKey(key))
        {
          addToWords(key, false);
          addToWords(key.substring(1), false);
        }

        addToWords(lcKey, true);
        addToWords(lcKey.substring(1), false);

        addResult("atag", key);
      }
    | HTAG
      {
        String key = TextLexer.trim($HTAG.text);
        String lcKey = key.toLowerCase();

        if (csWordMap.containsKey(key))
        {
          addToWords(key, false);
          addToWords(key.substring(1), false);
        }

        addToWords(lcKey, true);
        addToWords(lcKey.substring(1), false);

        addWordList(lcKey);

        addResult("htag", key);
      }
    | EMAIL
      {
        String key = TextLexer.trim($EMAIL.text);
        String lcKey = key.toLowerCase();

        addWordList(lcKey);

        if (csWordMap.containsKey(key))
          addToWords(key, false);

        //addResult("pnouns", key);
        addToWords(lcKey, true);
        addResult("email", lcKey);
      }
    /*
    | PIN
      {
        String key = $PIN.text;

        addResult("pin", key);
      }
    | CVV
      {
        String key = $CVV.text;

        addResult("cvv", key);
      }
    | EXPIRY
      {
        String key = $EXPIRY.text;

        addResult("expiry", key);
      }
    */
  ;
    catch [Exception re]
    {
      //re.printStackTrace();
      System.err.println(re.toString());
    }

HREF
  : '#@#' ( URL
           | ~[ \r\n\t\f<>\u00A0\u1361\u1680\u180E\u2000-\u200B\u202F\u205F\u2420\u3000\u303f\uFEFF]+
           )
    {
      String txt = getText();

      setText(txt.substring(3));
    }
  ;

//NPOSTCODE : WS [0-9][0-9][0-9][0-9][0-9] WS { System.err.println(getText()); };

/*
XMLMARKUP
  : '<' ('!--'|'/')? IDENT ~'>'+ '>'
  ;
*/

XMLESCAPE
  : '&#' ([0-9][0-9][0-9]? | [A-Za-z]+ ('14'|'12'|'34')?) ';' -> skip
  ;

CDATA
  : '<![CDATA[' .+? ']]>' -> skip
  ;

LONGINT : CCGROUP CCGROUP CCGROUP CCGROUP [0-9]+;
NOTCC : '%26d=' CCGROUP CCGROUP CCGROUP CCGROUP '%26' -> skip;
NOTCC2 : '|' CCGROUP CCGROUP CCGROUP CCGROUP '|' -> skip;

CC    : // May need additional patterns
      ( '0' '1' [0-9] [0-9]? CCGROUP CCGROUP CCGROUP  // IMEI
      //| '4' ([0-9] [0-9] [0-9])?  CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
      | '4' [0-9] [0-9] [0-9] CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
                                  // Visa 16. 13 digit Visa obsolete
      | '5' [1-5] [0-9] [0-9] CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
                              // MasterCard
      | '3' ( [47] [0-9] [0-9] CCSEP? CCGROUP [0-9] [0-9] CCSEP? CCGROUP [0-9]
                               // Amex
            | [068] CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
                            // DC
            | '5' [0-9] [0-9]? CCGROUP CCGROUP CCGROUP
            )
      | '6' [05] [0-9] [0-9] CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
                             // Discover
      | '63400' [0-4] CCGROUP CCGROUP CCGROUP  // Tesco Club Card
      | '8' '6' [0-9] [0-9]? CCGROUP CCGROUP CCGROUP  // IMEI
      | '98263000' CCSEP? CCGROUP CCGROUP CCSEP? [0-9] [0-9] [0-9]  // Nectar
      | '1' [03478] [0-9] [0-9] CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
      | '2' [0-2] [0-9] [0-9] CCSEP? CCGROUP CCSEP? CCGROUP CCSEP? CCGROUP
      ) (' '? | [A-Za-z]*)
      { isValidLuhn(getText()) }?
    ;

fragment CCSEP : [- ._];
fragment CCGROUP : [0-9] [0-9] [0-9] [0-9];

HTTP_ENCODING : '%' [0-9][0-9];

// This is a finely tuned compromise between efficiency / functionality etc
WORDS
  : WSCHAR? (IWORD (WSCHAR IWORD (WSCHAR IWORD (WSCHAR IWORD)?)?)?)? WORD
    { prefixWord(getText()) }?
  | (CJKVWORD (CJKVWORD (CJKVWORD CJKVWORD?)?)?)? CJKVWORD
    { wordMap.containsKey(getText()) }?
  ;

WORD
  : IWORD (PUNCTCHAR|WSCHAR)
  ;

fragment CJKVWORD
  : [\u2E80-\u2FDF\u2FF0-\u303F\u31C0-\u31EF\u3200-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF\uFE30-\uFE4F]
  | ('\u2e80'..'\ufffe') { Character.isIdeographic(getText().charAt(0)) }?
  ;

fragment IWORD
  : ([A-Za-z0-9]|'\u00a0'..'\u2E7F'|'\u2FE0'..'\u2FEF'|'\u3040'..'\u31BF'|'\u31F0'..'\u31FF'|'\u4DC0'..'\u4DFF'|'\uA000'..'\uF8FF'|'\uFB00'..'\uFE2F'|'\uFE50'..'\uFFFF'|WORDCHAR)+
  ;

fragment INITCAP
  : [A-Z] IWORD // { ! StopWords.isStopWord(getText().toLowerCase()) }?
  ;

INITCAPS
  : WSCHAR? INITCAP //{ ! TextParser.stops.contains(getText().toLowerCase()) }?
                    //{ ! TextParser.stops.contains(getText()) }?
            ( WSCHAR INITCAP WSCHAR INITCAP WSCHAR INITCAP
            | WSCHAR INITCAP WSCHAR INITCAP
            | WSCHAR INITCAP
            |
            )
    (PUNCTCHAR|WSCHAR)
  ;

PUNCT
  : (PUNCTCHAR | WORDCHAR)+
  ;

IP
  : WS? OCTET '.' OCTET '.' OCTET '.' OCTET
  ;

URL
  : WS? URI ('?' AV ('&' AV)*)? //{ !trim(getText()).endsWith(".") }?
  | WS? 'http' 's'? '://t.co/' HTTPIDENT
  ;

EMAIL
  : HTTPIDENT ('.' HTTPIDENT)* '@' DOMAIN
  ;

ATAG : '@' IDENT;
HTAG : '#' IDENT;

fragment HDL : [0-9a-f];
fragment HDU : [0-9A-F];

POSTCODE : [A-PR-UWYZ][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? ' ' [ABEHMNPRVWXY0-9][0-9]?[ABD-HJLN-UW-Z]?[ABD-HJLN-UW-Z]? { isPostcode(trim(getText())) }?
         | 'GIR 0AA'
         ;
//PIN : INT { getText().length() == 4 }?;
//CVV : INT { getText().length() == 3 }?;
//EXPIRY : MOY DTSEP? YY;

DATETIME
    : YYYYM '-' MOY '-' DOM (' '|'T') TIME
      { setText(getText().trim()); }
    ;

SHORTDATE
    : MOY '/' DOM '/' YYYY
      {
        String[] bits = getText().split("/");

        String m = bits[0].length() == 1 ? "0" + bits[0] : bits[0];
        String d = bits[1].length() == 1 ? "0" + bits[1] : bits[1];
        String y = bits[2].length() == 2 ? "20" + bits[2] : bits[2];

        setText(y + m + d);
      }
    | YYYY '.' MOY '.' DOM
      {
        bits = getText().split("\\.");

        y = bits[0].length() == 2 ? "20" + bits[0] : bits[0];
        m = bits[1].length() == 1 ? "0" + bits[1] : bits[1];
        d = bits[2].length() == 1 ? "0" + bits[2] : bits[2];

        setText(y + m + d);
      }
    | YYYYM '-' MOY '-' DOM
      {
        bits = getText().split("-");

        y = bits[0];
        m = bits[1].length() == 1 ? "0" + bits[1] : bits[1];
        d = bits[2].length() == 1 ? "0" + bits[2] : bits[2];

        setText(y + m + d);
      }
    | YYYYM MOY DOM
    | DOM DTSEP MOY DTSEP YYYY
      {
        bits = getText().split("(/|\\\\/)");

        d = bits[0].length() == 1 ? "0" + bits[0] : bits[0];
        m = bits[1].length() == 1 ? "0" + bits[1] : bits[1];
        y = bits[2].length() == 2 ? "20" + bits[2] : bits[2];

        setText(y + m + d);
      }
    | ('Jan'|'Feb'|'Mar'|'Apr'|'May'|'Jun'|'Jul'|'Aug'|'Sep'|'Oct'|'Nov'|'Dec')
      ' ' DOM ',' ' ' YYYYM
      {
        bits = getText().split("[ ,]+");

        int mm = ("JanFebMarAprMayJunJulAugSepOctDec".indexOf(bits[0]) + 1) / 3 + 1;
        d = bits[1].length() == 1 ? "0" + bits[1] : bits[1];
        m = mm <= 10 ? "0" + mm : "" + mm;
        y = bits[2];

        setText(y + m + d);
      }
    ;

TIME : ('0'? [0-9] | '1' [0-9] | '2' [0-3]) ':' [0-5][0-9] (':' [0-5][0-9])? ' '? ('AM'|'PM'|'am'|'pm')? { setText(getText().trim()); };

fragment DOM : ('0'? [0-9] | [1-2][0-9] | '3' [0-1]);
fragment MOY : ('0'? [0-9] | '1' [0-2]);
fragment YYYY : ('2' [0123])?[0-9][0-9];
fragment YYYYM : '2' [0123][0-9][0-9];
fragment DTSEP : ('/'|'\\/');

FLOAT
    :   '-'? INT '.' [0-9]+ EXP?   // 1.35, 1.35E-9, 0.3, -4.5
    |   '-'? INT EXP            // 1e10 -3e4
    ;

fragment INTEGER
    :   [+-]? INT                // -3, 45
    ;

fragment OCTET : [0-9]([0-9]([0-9])?)?;
fragment URI : [a-z]+ '://' (DOMAIN|IP) ('/' HTTPIDENT?)*;
fragment AV : IDENT '=' (IDENT|INTEGER|FLOAT|[-])*;
fragment IDENT : [a-zA-Z_] [a-zA-Z0-9_]* ;
fragment HTTPIDENT : [0-9a-zA-Z] ('.'|','|'-'|[0-9a-zA-Z])+ ;

// ?? How to handle non Latin TLDs? ??
DOMAIN : HTTPIDENT ('.' HTTPIDENT)* '.' [a-zA-Z] [a-zA-Z]+
         { isTld(getText()) }?
       ;

fragment INT :   '0' | [1-9] [0-9]* ; // no leading zeros
fragment EXP :   [Ee] [+\-]? INT ; // \- since - means "range" inside [...]

fragment MQUOTE : ('"' IDENT '"'|'\'' IDENT '\''|IDENT);

fragment WORDCHAR
  : [-\'’&_*]
  ;

fragment PUNCTCHAR
  : [`!"£$%^&*()\\-_+,={}:@~;'#?./\\|>\u005B\u005D\u00A1\u00A6\u00A7\u00A8\u00A9\u00AB\u00AC\u00AE\u00AF\u00B0\u00B1\u00B4\u00B6\u00B7\u00B8\u00BB\u00BF\u00D7\u00F7\u02C2\u02C3\u02C4\u02C5\u02D2\u02D3\u02D4\u02D5\u02D6\u02D7\u02D8\u02D9\u02DA\u02DB\u02DC\u02DD\u02DE\u02DF\u02E5\u02E6\u02E7\u02E8\u02E9\u02EA\u02EB\u02ED\u02EF\u02F0\u02F1\u02F2\u02F3\u02F4\u02F5\u02F6\u02F7\u02F8\u02F9\u02FA\u02FB\u02FC\u02FD\u02FE\u02FF\u0375\u037E\u0384\u0385\u0387\u03F6\u0482\u055A\u055B\u055C\u055D\u055E\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0606\u0607\u0608\u0609\u060A\u060C\u060D\u060E\u060F\u061B\u061E\u061F\u066A\u066B\u066C\u066D\u06D4\u06DE\u06E9\u06FD\u06FE\u0700\u0701\u0702\u0703\u0704\u0705\u0706\u0707\u0708\u0709\u070A\u070B\u070C\u070D\u07F6\u07F7\u07F8\u07F9\u0830\u0831\u0832\u0833\u0834\u0835\u0836\u0837\u0838\u0839\u083A\u083B\u083C\u083D\u083E\u085E\u0964\u0965\u0970\u09FA\u0AF0\u0B70\u0BF3\u0BF4\u0BF5\u0BF6\u0BF7\u0BF8\u0BFA\u0C7F\u0D79\u0DF4\u0E4F\u0E5A\u0E5B\u0F01\u0F02\u0F03\u0F04\u0F05\u0F06\u0F07\u0F08\u0F09\u0F0A\u0F0B\u0F0C\u0F0D\u0F0E\u0F0F\u0F10\u0F11\u0F12\u0F13\u0F14\u0F15\u0F16\u0F17\u0F1A\u0F1B\u0F1C\u0F1D\u0F1E\u0F1F\u0F34\u0F36\u0F38\u0F3A\u0F3B\u0F3C\u0F3D\u0F85\u0FBE\u0FBF\u0FC0\u0FC1\u0FC2\u0FC3\u0FC4\u0FC5\u0FC7\u0FC8\u0FC9\u0FCA\u0FCB\u0FCC\u0FCE\u0FCF\u0FD0\u0FD1\u0FD2\u0FD3\u0FD4\u0FD5\u0FD6\u0FD7\u0FD8\u0FD9\u0FDA\u104A\u104B\u104C\u104D\u104E\u104F\u109E\u109F\u10FB\u1360\u1362\u1363\u1364\u1365\u1366\u1367\u1368\u1390\u1391\u1392\u1393\u1394\u1395\u1396\u1397\u1398\u1399\u1400\u166D\u166E\u169B\u169C\u16EB\u16EC\u16ED\u1735\u1736\u17D4\u17D5\u17D6\u17D8\u17D9\u17DA\u1800\u1801\u1802\u1803\u1804\u1805\u1806\u1807\u1808\u1809\u180A\u1940\u1944\u1945\u19DE\u19DF\u19E0\u19E1\u19E2\u19E3\u19E4\u19E5\u19E6\u19E7\u19E8\u19E9\u19EA\u19EB\u19EC\u19ED\u19EE\u19EF\u19F0\u19F1\u19F2\u19F3\u19F4\u19F5\u19F6\u19F7\u19F8\u19F9\u19FA\u19FB\u19FC\u19FD\u19FE\u19FF\u1A1E\u1A1F\u1AA0\u1AA1\u1AA2\u1AA3\u1AA4\u1AA5\u1AA6\u1AA8\u1AA9\u1AAA\u1AAB\u1AAC\u1AAD\u1B5A\u1B5B\u1B5C\u1B5D\u1B5E\u1B5F\u1B60\u1B61\u1B62\u1B63\u1B64\u1B65\u1B66\u1B67\u1B68\u1B69\u1B6A\u1B74\u1B75\u1B76\u1B77\u1B78\u1B79\u1B7A\u1B7B\u1B7C\u1BFC\u1BFD\u1BFE\u1BFF\u1C3B\u1C3C\u1C3D\u1C3E\u1C3F\u1C7E\u1C7F\u1CC0\u1CC1\u1CC2\u1CC3\u1CC4\u1CC5\u1CC6\u1CC7\u1CD3\u1FBD\u1FBF\u1FC0\u1FC1\u1FCD\u1FCE\u1FCF\u1FDD\u1FDE\u1FDF\u1FED\u1FEE\u1FEF\u1FFD\u1FFE\u2010\u2011\u2012\u2013\u2014\u2015\u2016\u2017\u2018\u201A\u201B\u201C\u201D\u201E\u201F\u2020\u2021\u2022\u2023\u2024\u2025\u2026\u2027\u2030\u2031\u2032\u2033\u2034\u2035\u2036\u2037\u2038\u2039\u203A\u203B\u203C\u203D\u203E\u203F\u2040\u2041\u2042\u2043\u2044\u2045\u2046\u2047\u2048\u2049\u204A\u204B\u204C\u204D\u204E\u204F\u2050\u2051\u2052\u2053\u2054\u2055\u2056\u2057\u2058\u2059\u205A\u205B\u205C\u205D\u205E\u207A\u207B\u207C\u207D\u207E\u208A\u208B\u208C\u208D\u208E\u2100\u2101\u2103\u2104\u2105\u2106\u2108\u2109\u2114\u2116\u2117\u2118\u211E\u211F\u2120\u2121\u2122\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140\u2141\u2142\u2143\u2144\u214A\u214B\u214C\u214D\u214F\u2190\u2191\u2192\u2193\u2194\u2195\u2196\u2197\u2198\u2199\u219A\u219B\u219C\u219D\u219E\u219F\u21A0\u21A1\u21A2\u21A3\u21A4\u21A5\u21A6\u21A7\u21A8\u21A9\u21AA\u21AB\u21AC\u21AD\u21AE\u21AF\u21B0\u21B1\u21B2\u21B3\u21B4\u21B5\u21B6\u21B7\u21B8\u21B9\u21BA\u21BB\u21BC\u21BD\u21BE\u21BF\u21C0\u21C1\u21C2\u21C3\u21C4\u21C5\u21C6\u21C7\u21C8\u21C9\u21CA\u21CB\u21CC\u21CD\u21CE\u21CF\u21D0\u21D1\u21D2\u21D3\u21D4\u21D5\u21D6\u21D7\u21D8\u21D9\u21DA\u21DB\u21DC\u21DD\u21DE\u21DF\u21E0\u21E1\u21E2\u21E3\u21E4\u21E5\u21E6\u21E7\u21E8\u21E9\u21EA\u21EB\u21EC\u21ED\u21EE\u21EF\u21F0\u21F1\u21F2\u21F3\u21F4\u21F5\u21F6\u21F7\u21F8\u21F9\u21FA\u21FB\u21FC\u21FD\u21FE\u21FF\u2200\u2201\u2202\u2203\u2204\u2205\u2206\u2207\u2208\u2209\u220A\u220B\u220C\u220D\u220E\u220F\u2210\u2211\u2212\u2213\u2214\u2215\u2216\u2217\u2218\u2219\u221A\u221B\u221C\u221D\u221E\u221F\u2220\u2221\u2222\u2223\u2224\u2225\u2226\u2227\u2228\u2229\u222A\u222B\u222C\u222D\u222E\u222F\u2230\u2231\u2232\u2233\u2234\u2235\u2236\u2237\u2238\u2239\u223A\u223B\u223C\u223D\u223E\u223F\u2240\u2241\u2242\u2243\u2244\u2245\u2246\u2247\u2248\u2249\u224A\u224B\u224C\u224D\u224E\u224F\u2250\u2251\u2252\u2253\u2254\u2255\u2256\u2257\u2258\u2259\u225A\u225B\u225C\u225D\u225E\u225F\u2260\u2261\u2262\u2263\u2264\u2265\u2266\u2267\u2268\u2269\u226A\u226B\u226C\u226D\u226E\u226F\u2270\u2271\u2272\u2273\u2274\u2275\u2276\u2277\u2278\u2279\u227A\u227B\u227C\u227D\u227E\u227F\u2280\u2281\u2282\u2283\u2284\u2285\u2286\u2287\u2288\u2289\u228A\u228B\u228C\u228D\u228E\u228F\u2290\u2291\u2292\u2293\u2294\u2295\u2296\u2297\u2298\u2299\u229A\u229B\u229C\u229D\u229E\u229F\u22A0\u22A1\u22A2\u22A3\u22A4\u22A5\u22A6\u22A7\u22A8\u22A9\u22AA\u22AB\u22AC\u22AD\u22AE\u22AF\u22B0\u22B1\u22B2\u22B3\u22B4\u22B5\u22B6\u22B7\u22B8\u22B9\u22BA\u22BB\u22BC\u22BD\u22BE\u22BF\u22C0\u22C1\u22C2\u22C3\u22C4\u22C5\u22C6\u22C7\u22C8\u22C9\u22CA\u22CB\u22CC\u22CD\u22CE\u22CF\u22D0\u22D1\u22D2\u22D3\u22D4\u22D5\u22D6\u22D7\u22D8\u22D9\u22DA\u22DB\u22DC\u22DD\u22DE\u22DF\u22E0\u22E1\u22E2\u22E3\u22E4\u22E5\u22E6\u22E7\u22E8\u22E9\u22EA\u22EB\u22EC\u22ED\u22EE\u22EF\u22F0\u22F1\u22F2\u22F3\u22F4\u22F5\u22F6\u22F7\u22F8\u22F9\u22FA\u22FB\u22FC\u22FD\u22FE\u22FF\u2300\u2301\u2302\u2303\u2304\u2305\u2306\u2307\u2308\u2309\u230A\u230B\u230C\u230D\u230E\u230F\u2310\u2311\u2312\u2313\u2314\u2315\u2316\u2317\u2318\u2319\u231A\u231B\u231C\u231D\u231E\u231F\u2320\u2321\u2322\u2323\u2324\u2325\u2326\u2327\u2328\u2329\u232A\u232B\u232C\u232D\u232E\u232F\u2330\u2331\u2332\u2333\u2334\u2335\u2336\u2337\u2338\u2339\u233A\u233B\u233C\u233D\u233E\u233F\u2340\u2341\u2342\u2343\u2344\u2345\u2346\u2347\u2348\u2349\u234A\u234B\u234C\u234D\u234E\u234F\u2350\u2351\u2352\u2353\u2354\u2355\u2356\u2357\u2358\u2359\u235A\u235B\u235C\u235D\u235E\u235F\u2360\u2361\u2362\u2363\u2364\u2365\u2366\u2367\u2368\u2369\u236A\u236B\u236C\u236D\u236E\u236F\u2370\u2371\u2372\u2373\u2374\u2375\u2376\u2377\u2378\u2379\u237A\u237B\u237C\u237D\u237E\u237F\u2380\u2381\u2382\u2383\u2384\u2385\u2386\u2387\u2388\u2389\u238A\u238B\u238C\u238D\u238E\u238F\u2390\u2391\u2392\u2393\u2394\u2395\u2396\u2397\u2398\u2399\u239A\u239B\u239C\u239D\u239E\u239F\u23A0\u23A1\u23A2\u23A3\u23A4\u23A5\u23A6\u23A7\u23A8\u23A9\u23AA\u23AB\u23AC\u23AD\u23AE\u23AF\u23B0\u23B1\u23B2\u23B3\u23B4\u23B5\u23B6\u23B7\u23B8\u23B9\u23BA\u23BB\u23BC\u23BD\u23BE\u23BF\u23C0\u23C1\u23C2\u23C3\u23C4\u23C5\u23C6\u23C7\u23C8\u23C9\u23CA\u23CB\u23CC\u23CD\u23CE\u23CF\u23D0\u23D1\u23D2\u23D3\u23D4\u23D5\u23D6\u23D7\u23D8\u23D9\u23DA\u23DB\u23DC\u23DD\u23DE\u23DF\u23E0\u23E1\u23E2\u23E3\u23E4\u23E5\u23E6\u23E7\u23E8\u23E9\u23EA\u23EB\u23EC\u23ED\u23EE\u23EF\u23F0\u23F1\u23F2\u23F3\u2400\u2401\u2402\u2403\u2404\u2405\u2406\u2407\u2408\u2409\u240A\u240B\u240C\u240D\u240E\u240F\u2410\u2411\u2412\u2413\u2414\u2415\u2416\u2417\u2418\u2419\u241A\u241B\u241C\u241D\u241E\u241F\u2421\u2422\u2423\u2424\u2425\u2426\u2440\u2441\u2442\u2443\u2444\u2445\u2446\u2447\u2448\u2449\u244A\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u24B6\u24B7\u24B8\u24B9\u24BA\u24BB\u24BC\u24BD\u24BE\u24BF\u24C0\u24C1\u24C2\u24C3\u24C4\u24C5\u24C6\u24C7\u24C8\u24C9\u24CA\u24CB\u24CC\u24CD\u24CE\u24CF\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\u254C\u254D\u254E\u254F\u2550\u2551\u2552\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\u256D\u256E\u256F\u2570\u2571\u2572\u2573\u2574\u2575\u2576\u2577\u2578\u2579\u257A\u257B\u257C\u257D\u257E\u257F\u2580\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u2589\u258A\u258B\u258C\u258D\u258E\u258F\u2590\u2591\u2592\u2593\u2594\u2595\u2596\u2597\u2598\u2599\u259A\u259B\u259C\u259D\u259E\u259F\u25A0\u25A1\u25A2\u25A3\u25A4\u25A5\u25A6\u25A7\u25A8\u25A9\u25AA\u25AB\u25AC\u25AD\u25AE\u25AF\u25B0\u25B1\u25B2\u25B3\u25B4\u25B5\u25B6\u25B7\u25B8\u25B9\u25BA\u25BB\u25BC\u25BD\u25BE\u25BF\u25C0\u25C1\u25C2\u25C3\u25C4\u25C5\u25C6\u25C7\u25C8\u25C9\u25CA\u25CB\u25CC\u25CD\u25CE\u25CF\u25D0\u25D1\u25D2\u25D3\u25D4\u25D5\u25D6\u25D7\u25D8\u25D9\u25DA\u25DB\u25DC\u25DD\u25DE\u25DF\u25E0\u25E1\u25E2\u25E3\u25E4\u25E5\u25E6\u25E7\u25E8\u25E9\u25EA\u25EB\u25EC\u25ED\u25EE\u25EF\u25F0\u25F1\u25F2\u25F3\u25F4\u25F5\u25F6\u25F7\u25F8\u25F9\u25FA\u25FB\u25FC\u25FD\u25FE\u25FF\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260A\u260B\u260C\u260D\u260E\u260F\u2610\u2611\u2612\u2613\u2614\u2615\u2616\u2617\u2618\u2619\u261A\u261B\u261C\u261D\u261E\u261F\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262A\u262B\u262C\u262D\u262E\u262F\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263A\u263B\u263C\u263D\u263E\u263F\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u2648\u2649\u264A\u264B\u264C\u264D\u264E\u264F\u2650\u2651\u2652\u2653\u2654\u2655\u2656\u2657\u2658\u2659\u265A\u265B\u265C\u265D\u265E\u265F\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266A\u266B\u266C\u266D\u266E\u266F\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267A\u267B\u267C\u267D\u267E\u267F\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2687\u2688\u2689\u268A\u268B\u268C\u268D\u268E\u268F\u2690\u2691\u2692\u2693\u2694\u2695\u2696\u2697\u2698\u2699\u269A\u269B\u269C\u269D\u269E\u269F\u26A0\u26A1\u26A2\u26A3\u26A4\u26A5\u26A6\u26A7\u26A8\u26A9\u26AA\u26AB\u26AC\u26AD\u26AE\u26AF\u26B0\u26B1\u26B2\u26B3\u26B4\u26B5\u26B6\u26B7\u26B8\u26B9\u26BA\u26BB\u26BC\u26BD\u26BE\u26BF\u26C0\u26C1\u26C2\u26C3\u26C4\u26C5\u26C6\u26C7\u26C8\u26C9\u26CA\u26CB\u26CC\u26CD\u26CE\u26CF\u26D0\u26D1\u26D2\u26D3\u26D4\u26D5\u26D6\u26D7\u26D8\u26D9\u26DA\u26DB\u26DC\u26DD\u26DE\u26DF\u26E0\u26E1\u26E2\u26E3\u26E4\u26E5\u26E6\u26E7\u26E8\u26E9\u26EA\u26EB\u26EC\u26ED\u26EE\u26EF\u26F0\u26F1\u26F2\u26F3\u26F4\u26F5\u26F6\u26F7\u26F8\u26F9\u26FA\u26FB\u26FC\u26FD\u26FE\u26FF\u2701\u2702\u2703\u2704\u2705\u2706\u2707\u2708\u2709\u270A\u270B\u270C\u270D\u270E\u270F\u2710\u2711\u2712\u2713\u2714\u2715\u2716\u2717\u2718\u2719\u271A\u271B\u271C\u271D\u271E\u271F\u2720\u2721\u2722\u2723\u2724\u2725\u2726\u2727\u2728\u2729\u272A\u272B\u272C\u272D\u272E\u272F\u2730\u2731\u2732\u2733\u2734\u2735\u2736\u2737\u2738\u2739\u273A\u273B\u273C\u273D\u273E\u273F\u2740\u2741\u2742\u2743\u2744\u2745\u2746\u2747\u2748\u2749\u274A\u274B\u274C\u274D\u274E\u274F\u2750\u2751\u2752\u2753\u2754\u2755\u2756\u2757\u2758\u2759\u275A\u275B\u275C\u275D\u275E\u275F\u2760\u2761\u2762\u2763\u2764\u2765\u2766\u2767\u2768\u2769\u276A\u276B\u276C\u276D\u276E\u276F\u2770\u2771\u2772\u2773\u2774\u2775\u2794\u2795\u2796\u2797\u2798\u2799\u279A\u279B\u279C\u279D\u279E\u279F\u27A0\u27A1\u27A2\u27A3\u27A4\u27A5\u27A6\u27A7\u27A8\u27A9\u27AA\u27AB\u27AC\u27AD\u27AE\u27AF\u27B0\u27B1\u27B2\u27B3\u27B4\u27B5\u27B6\u27B7\u27B8\u27B9\u27BA\u27BB\u27BC\u27BD\u27BE\u27BF\u27C0\u27C1\u27C2\u27C3\u27C4\u27C5\u27C6\u27C7\u27C8\u27C9\u27CA\u27CB\u27CC\u27CD\u27CE\u27CF\u27D0\u27D1\u27D2\u27D3\u27D4\u27D5\u27D6\u27D7\u27D8\u27D9\u27DA\u27DB\u27DC\u27DD\u27DE\u27DF\u27E0\u27E1\u27E2\u27E3\u27E4\u27E5\u27E6\u27E7\u27E8\u27E9\u27EA\u27EB\u27EC\u27ED\u27EE\u27EF\u27F0\u27F1\u27F2\u27F3\u27F4\u27F5\u27F6\u27F7\u27F8\u27F9\u27FA\u27FB\u27FC\u27FD\u27FE\u27FF\u2800\u2801\u2802\u2803\u2804\u2805\u2806\u2807\u2808\u2809\u280A\u280B\u280C\u280D\u280E\u280F\u2810\u2811\u2812\u2813\u2814\u2815\u2816\u2817\u2818\u2819\u281A\u281B\u281C\u281D\u281E\u281F\u2820\u2821\u2822\u2823\u2824\u2825\u2826\u2827\u2828\u2829\u282A\u282B\u282C\u282D\u282E\u282F\u2830\u2831\u2832\u2833\u2834\u2835\u2836\u2837\u2838\u2839\u283A\u283B\u283C\u283D\u283E\u283F\u2840\u2841\u2842\u2843\u2844\u2845\u2846\u2847\u2848\u2849\u284A\u284B\u284C\u284D\u284E\u284F\u2850\u2851\u2852\u2853\u2854\u2855\u2856\u2857\u2858\u2859\u285A\u285B\u285C\u285D\u285E\u285F\u2860\u2861\u2862\u2863\u2864\u2865\u2866\u2867\u2868\u2869\u286A\u286B\u286C\u286D\u286E\u286F\u2870\u2871\u2872\u2873\u2874\u2875\u2876\u2877\u2878\u2879\u287A\u287B\u287C\u287D\u287E\u287F\u2880\u2881\u2882\u2883\u2884\u2885\u2886\u2887\u2888\u2889\u288A\u288B\u288C\u288D\u288E\u288F\u2890\u2891\u2892\u2893\u2894\u2895\u2896\u2897\u2898\u2899\u289A\u289B\u289C\u289D\u289E\u289F\u28A0\u28A1\u28A2\u28A3\u28A4\u28A5\u28A6\u28A7\u28A8\u28A9\u28AA\u28AB\u28AC\u28AD\u28AE\u28AF\u28B0\u28B1\u28B2\u28B3\u28B4\u28B5\u28B6\u28B7\u28B8\u28B9\u28BA\u28BB\u28BC\u28BD\u28BE\u28BF\u28C0\u28C1\u28C2\u28C3\u28C4\u28C5\u28C6\u28C7\u28C8\u28C9\u28CA\u28CB\u28CC\u28CD\u28CE\u28CF\u28D0\u28D1\u28D2\u28D3\u28D4\u28D5\u28D6\u28D7\u28D8\u28D9\u28DA\u28DB\u28DC\u28DD\u28DE\u28DF\u28E0\u28E1\u28E2\u28E3\u28E4\u28E5\u28E6\u28E7\u28E8\u28E9\u28EA\u28EB\u28EC\u28ED\u28EE\u28EF\u28F0\u28F1\u28F2\u28F3\u28F4\u28F5\u28F6\u28F7\u28F8\u28F9\u28FA\u28FB\u28FC\u28FD\u28FE\u28FF\u2900\u2901\u2902\u2903\u2904\u2905\u2906\u2907\u2908\u2909\u290A\u290B\u290C\u290D\u290E\u290F\u2910\u2911\u2912\u2913\u2914\u2915\u2916\u2917\u2918\u2919\u291A\u291B\u291C\u291D\u291E\u291F\u2920\u2921\u2922\u2923\u2924\u2925\u2926\u2927\u2928\u2929\u292A\u292B\u292C\u292D\u292E\u292F\u2930\u2931\u2932\u2933\u2934\u2935\u2936\u2937\u2938\u2939\u293A\u293B\u293C\u293D\u293E\u293F\u2940\u2941\u2942\u2943\u2944\u2945\u2946\u2947\u2948\u2949\u294A\u294B\u294C\u294D\u294E\u294F\u2950\u2951\u2952\u2953\u2954\u2955\u2956\u2957\u2958\u2959\u295A\u295B\u295C\u295D\u295E\u295F\u2960\u2961\u2962\u2963\u2964\u2965\u2966\u2967\u2968\u2969\u296A\u296B\u296C\u296D\u296E\u296F\u2970\u2971\u2972\u2973\u2974\u2975\u2976\u2977\u2978\u2979\u297A\u297B\u297C\u297D\u297E\u297F\u2980\u2981\u2982\u2983\u2984\u2985\u2986\u2987\u2988\u2989\u298A\u298B\u298C\u298D\u298E\u298F\u2990\u2991\u2992\u2993\u2994\u2995\u2996\u2997\u2998\u2999\u299A\u299B\u299C\u299D\u299E\u299F\u29A0\u29A1\u29A2\u29A3\u29A4\u29A5\u29A6\u29A7\u29A8\u29A9\u29AA\u29AB\u29AC\u29AD\u29AE\u29AF\u29B0\u29B1\u29B2\u29B3\u29B4\u29B5\u29B6\u29B7\u29B8\u29B9\u29BA\u29BB\u29BC\u29BD\u29BE\u29BF\u29C0\u29C1\u29C2\u29C3\u29C4\u29C5\u29C6\u29C7\u29C8\u29C9\u29CA\u29CB\u29CC\u29CD\u29CE\u29CF\u29D0\u29D1\u29D2\u29D3\u29D4\u29D5\u29D6\u29D7\u29D8\u29D9\u29DA\u29DB\u29DC\u29DD\u29DE\u29DF\u29E0\u29E1\u29E2\u29E3\u29E4\u29E5\u29E6\u29E7\u29E8\u29E9\u29EA\u29EB\u29EC\u29ED\u29EE\u29EF\u29F0\u29F1\u29F2\u29F3\u29F4\u29F5\u29F6\u29F7\u29F8\u29F9\u29FA\u29FB\u29FC\u29FD\u29FE\u29FF\u2A00\u2A01\u2A02\u2A03\u2A04\u2A05\u2A06\u2A07\u2A08\u2A09\u2A0A\u2A0B\u2A0C\u2A0D\u2A0E\u2A0F\u2A10\u2A11\u2A12\u2A13\u2A14\u2A15\u2A16\u2A17\u2A18\u2A19\u2A1A\u2A1B\u2A1C\u2A1D\u2A1E\u2A1F\u2A20\u2A21\u2A22\u2A23\u2A24\u2A25\u2A26\u2A27\u2A28\u2A29\u2A2A\u2A2B\u2A2C\u2A2D\u2A2E\u2A2F\u2A30\u2A31\u2A32\u2A33\u2A34\u2A35\u2A36\u2A37\u2A38\u2A39\u2A3A\u2A3B\u2A3C\u2A3D\u2A3E\u2A3F\u2A40\u2A41\u2A42\u2A43\u2A44\u2A45\u2A46\u2A47\u2A48\u2A49\u2A4A\u2A4B\u2A4C\u2A4D\u2A4E\u2A4F\u2A50\u2A51\u2A52\u2A53\u2A54\u2A55\u2A56\u2A57\u2A58\u2A59\u2A5A\u2A5B\u2A5C\u2A5D\u2A5E\u2A5F\u2A60\u2A61\u2A62\u2A63\u2A64\u2A65\u2A66\u2A67\u2A68\u2A69\u2A6A\u2A6B\u2A6C\u2A6D\u2A6E\u2A6F\u2A70\u2A71\u2A72\u2A73\u2A74\u2A75\u2A76\u2A77\u2A78\u2A79\u2A7A\u2A7B\u2A7C\u2A7D\u2A7E\u2A7F\u2A80\u2A81\u2A82\u2A83\u2A84\u2A85\u2A86\u2A87\u2A88\u2A89\u2A8A\u2A8B\u2A8C\u2A8D\u2A8E\u2A8F\u2A90\u2A91\u2A92\u2A93\u2A94\u2A95\u2A96\u2A97\u2A98\u2A99\u2A9A\u2A9B\u2A9C\u2A9D\u2A9E\u2A9F\u2AA0\u2AA1\u2AA2\u2AA3\u2AA4\u2AA5\u2AA6\u2AA7\u2AA8\u2AA9\u2AAA\u2AAB\u2AAC\u2AAD\u2AAE\u2AAF\u2AB0\u2AB1\u2AB2\u2AB3\u2AB4\u2AB5\u2AB6\u2AB7\u2AB8\u2AB9\u2ABA\u2ABB\u2ABC\u2ABD\u2ABE\u2ABF\u2AC0\u2AC1\u2AC2\u2AC3\u2AC4\u2AC5\u2AC6\u2AC7\u2AC8\u2AC9\u2ACA\u2ACB\u2ACC\u2ACD\u2ACE\u2ACF\u2AD0\u2AD1\u2AD2\u2AD3\u2AD4\u2AD5\u2AD6\u2AD7\u2AD8\u2AD9\u2ADA\u2ADB\u2ADC\u2ADD\u2ADE\u2ADF\u2AE0\u2AE1\u2AE2\u2AE3\u2AE4\u2AE5\u2AE6\u2AE7\u2AE8\u2AE9\u2AEA\u2AEB\u2AEC\u2AED\u2AEE\u2AEF\u2AF0\u2AF1\u2AF2\u2AF3\u2AF4\u2AF5\u2AF6\u2AF7\u2AF8\u2AF9\u2AFA\u2AFB\u2AFC\u2AFD\u2AFE\u2AFF\u2B00\u2B01\u2B02\u2B03\u2B04\u2B05\u2B06\u2B07\u2B08\u2B09\u2B0A\u2B0B\u2B0C\u2B0D\u2B0E\u2B0F\u2B10\u2B11\u2B12\u2B13\u2B14\u2B15\u2B16\u2B17\u2B18\u2B19\u2B1A\u2B1B\u2B1C\u2B1D\u2B1E\u2B1F\u2B20\u2B21\u2B22\u2B23\u2B24\u2B25\u2B26\u2B27\u2B28\u2B29\u2B2A\u2B2B\u2B2C\u2B2D\u2B2E\u2B2F\u2B30\u2B31\u2B32\u2B33\u2B34\u2B35\u2B36\u2B37\u2B38\u2B39\u2B3A\u2B3B\u2B3C\u2B3D\u2B3E\u2B3F\u2B40\u2B41\u2B42\u2B43\u2B44\u2B45\u2B46\u2B47\u2B48\u2B49\u2B4A\u2B4B\u2B4C\u2B50\u2B51\u2B52\u2B53\u2B54\u2B55\u2B56\u2B57\u2B58\u2B59\u2CE5\u2CE6\u2CE7\u2CE8\u2CE9\u2CEA\u2CF9\u2CFA\u2CFB\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E02\u2E03\u2E04\u2E05\u2E06\u2E07\u2E08\u2E09\u2E0A\u2E0B\u2E0C\u2E0D\u2E0E\u2E0F\u2E10\u2E11\u2E12\u2E13\u2E14\u2E15\u2E16\u2E17\u2E18\u2E19\u2E1A\u2E1B\u2E1C\u2E1D\u2E1E\u2E1F\u2E20\u2E21\u2E22\u2E23\u2E24\u2E25\u2E26\u2E27\u2E28\u2E29\u2E2A\u2E2B\u2E2C\u2E2D\u2E2E\u2E30\u2E31\u2E32\u2E33\u2E34\u2E35\u2E36\u2E37\u2E38\u2E39\u2E3A\u2E3B\u2E80\u2E81\u2E82\u2E83\u2E84\u2E85\u2E86\u2E87\u2E88\u2E89\u2E8A\u2E8B\u2E8C\u2E8D\u2E8E\u2E8F\u2E90\u2E91\u2E92\u2E93\u2E94\u2E95\u2E96\u2E97\u2E98\u2E99\u2E9B\u2E9C\u2E9D\u2E9E\u2E9F\u2EA0\u2EA1\u2EA2\u2EA3\u2EA4\u2EA5\u2EA6\u2EA7\u2EA8\u2EA9\u2EAA\u2EAB\u2EAC\u2EAD\u2EAE\u2EAF\u2EB0\u2EB1\u2EB2\u2EB3\u2EB4\u2EB5\u2EB6\u2EB7\u2EB8\u2EB9\u2EBA\u2EBB\u2EBC\u2EBD\u2EBE\u2EBF\u2EC0\u2EC1\u2EC2\u2EC3\u2EC4\u2EC5\u2EC6\u2EC7\u2EC8\u2EC9\u2ECA\u2ECB\u2ECC\u2ECD\u2ECE\u2ECF\u2ED0\u2ED1\u2ED2\u2ED3\u2ED4\u2ED5\u2ED6\u2ED7\u2ED8\u2ED9\u2EDA\u2EDB\u2EDC\u2EDD\u2EDE\u2EDF\u2EE0\u2EE1\u2EE2\u2EE3\u2EE4\u2EE5\u2EE6\u2EE7\u2EE8\u2EE9\u2EEA\u2EEB\u2EEC\u2EED\u2EEE\u2EEF\u2EF0\u2EF1\u2EF2\u2EF3\u2F00\u2F01\u2F02\u2F03\u2F04\u2F05\u2F06\u2F07\u2F08\u2F09\u2F0A\u2F0B\u2F0C\u2F0D\u2F0E\u2F0F\u2F10\u2F11\u2F12\u2F13\u2F14\u2F15\u2F16\u2F17\u2F18\u2F19\u2F1A\u2F1B\u2F1C\u2F1D\u2F1E\u2F1F\u2F20\u2F21\u2F22\u2F23\u2F24\u2F25\u2F26\u2F27\u2F28\u2F29\u2F2A\u2F2B\u2F2C\u2F2D\u2F2E\u2F2F\u2F30\u2F31\u2F32\u2F33\u2F34\u2F35\u2F36\u2F37\u2F38\u2F39\u2F3A\u2F3B\u2F3C\u2F3D\u2F3E\u2F3F\u2F40\u2F41\u2F42\u2F43\u2F44\u2F45\u2F46\u2F47\u2F48\u2F49\u2F4A\u2F4B\u2F4C\u2F4D\u2F4E\u2F4F\u2F50\u2F51\u2F52\u2F53\u2F54\u2F55\u2F56\u2F57\u2F58\u2F59\u2F5A\u2F5B\u2F5C\u2F5D\u2F5E\u2F5F\u2F60\u2F61\u2F62\u2F63\u2F64\u2F65\u2F66\u2F67\u2F68\u2F69\u2F6A\u2F6B\u2F6C\u2F6D\u2F6E\u2F6F\u2F70\u2F71\u2F72\u2F73\u2F74\u2F75\u2F76\u2F77\u2F78\u2F79\u2F7A\u2F7B\u2F7C\u2F7D\u2F7E\u2F7F\u2F80\u2F81\u2F82\u2F83\u2F84\u2F85\u2F86\u2F87\u2F88\u2F89\u2F8A\u2F8B\u2F8C\u2F8D\u2F8E\u2F8F\u2F90\u2F91\u2F92\u2F93\u2F94\u2F95\u2F96\u2F97\u2F98\u2F99\u2F9A\u2F9B\u2F9C\u2F9D\u2F9E\u2F9F\u2FA0\u2FA1\u2FA2\u2FA3\u2FA4\u2FA5\u2FA6\u2FA7\u2FA8\u2FA9\u2FAA\u2FAB\u2FAC\u2FAD\u2FAE\u2FAF\u2FB0\u2FB1\u2FB2\u2FB3\u2FB4\u2FB5\u2FB6\u2FB7\u2FB8\u2FB9\u2FBA\u2FBB\u2FBC\u2FBD\u2FBE\u2FBF\u2FC0\u2FC1\u2FC2\u2FC3\u2FC4\u2FC5\u2FC6\u2FC7\u2FC8\u2FC9\u2FCA\u2FCB\u2FCC\u2FCD\u2FCE\u2FCF\u2FD0\u2FD1\u2FD2\u2FD3\u2FD4\u2FD5\u2FF0\u2FF1\u2FF2\u2FF3\u2FF4\u2FF5\u2FF6\u2FF7\u2FF8\u2FF9\u2FFA\u2FFB\u3001\u3002\u3003\u3004\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\u3012\u3013\u3014\u3015\u3016\u3017\u3018\u3019\u301A\u301B\u301C\u301D\u301E\u301F\u3020\u3030\u3036\u3037\u303D\u303E\u309B\u309C\u30A0\u30FB\u3190\u3191\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u31C0\u31C1\u31C2\u31C3\u31C4\u31C5\u31C6\u31C7\u31C8\u31C9\u31CA\u31CB\u31CC\u31CD\u31CE\u31CF\u31D0\u31D1\u31D2\u31D3\u31D4\u31D5\u31D6\u31D7\u31D8\u31D9\u31DA\u31DB\u31DC\u31DD\u31DE\u31DF\u31E0\u31E1\u31E2\u31E3\u3200\u3201\u3202\u3203\u3204\u3205\u3206\u3207\u3208\u3209\u320A\u320B\u320C\u320D\u320E\u320F\u3210\u3211\u3212\u3213\u3214\u3215\u3216\u3217\u3218\u3219\u321A\u321B\u321C\u321D\u321E\u322A\u322B\u322C\u322D\u322E\u322F\u3230\u3231\u3232\u3233\u3234\u3235\u3236\u3237\u3238\u3239\u323A\u323B\u323C\u323D\u323E\u323F\u3240\u3241\u3242\u3243\u3244\u3245\u3246\u3247\u3250\u3260\u3261\u3262\u3263\u3264\u3265\u3266\u3267\u3268\u3269\u326A\u326B\u326C\u326D\u326E\u326F\u3270\u3271\u3272\u3273\u3274\u3275\u3276\u3277\u3278\u3279\u327A\u327B\u327C\u327D\u327E\u327F\u328A\u328B\u328C\u328D\u328E\u328F\u3290\u3291\u3292\u3293\u3294\u3295\u3296\u3297\u3298\u3299\u329A\u329B\u329C\u329D\u329E\u329F\u32A0\u32A1\u32A2\u32A3\u32A4\u32A5\u32A6\u32A7\u32A8\u32A9\u32AA\u32AB\u32AC\u32AD\u32AE\u32AF\u32B0\u32C0\u32C1\u32C2\u32C3\u32C4\u32C5\u32C6\u32C7\u32C8\u32C9\u32CA\u32CB\u32CC\u32CD\u32CE\u32CF\u32D0\u32D1\u32D2\u32D3\u32D4\u32D5\u32D6\u32D7\u32D8\u32D9\u32DA\u32DB\u32DC\u32DD\u32DE\u32DF\u32E0\u32E1\u32E2\u32E3\u32E4\u32E5\u32E6\u32E7\u32E8\u32E9\u32EA\u32EB\u32EC\u32ED\u32EE\u32EF\u32F0\u32F1\u32F2\u32F3\u32F4\u32F5\u32F6\u32F7\u32F8\u32F9\u32FA\u32FB\u32FC\u32FD\u32FE\u3300\u3301\u3302\u3303\u3304\u3305\u3306\u3307\u3308\u3309\u330A\u330B\u330C\u330D\u330E\u330F\u3310\u3311\u3312\u3313\u3314\u3315\u3316\u3317\u3318\u3319\u331A\u331B\u331C\u331D\u331E\u331F\u3320\u3321\u3322\u3323\u3324\u3325\u3326\u3327\u3328\u3329\u332A\u332B\u332C\u332D\u332E\u332F\u3330\u3331\u3332\u3333\u3334\u3335\u3336\u3337\u3338\u3339\u333A\u333B\u333C\u333D\u333E\u333F\u3340\u3341\u3342\u3343\u3344\u3345\u3346\u3347\u3348\u3349\u334A\u334B\u334C\u334D\u334E\u334F\u3350\u3351\u3352\u3353\u3354\u3355\u3356\u3357\u3358\u3359\u335A\u335B\u335C\u335D\u335E\u335F\u3360\u3361\u3362\u3363\u3364\u3365\u3366\u3367\u3368\u3369\u336A\u336B\u336C\u336D\u336E\u336F\u3370\u3371\u3372\u3373\u3374\u3375\u3376\u3377\u3378\u3379\u337A\u337B\u337C\u337D\u337E\u337F\u3380\u3381\u3382\u3383\u3384\u3385\u3386\u3387\u3388\u3389\u338A\u338B\u338C\u338D\u338E\u338F\u3390\u3391\u3392\u3393\u3394\u3395\u3396\u3397\u3398\u3399\u339A\u339B\u339C\u339D\u339E\u339F\u33A0\u33A1\u33A2\u33A3\u33A4\u33A5\u33A6\u33A7\u33A8\u33A9\u33AA\u33AB\u33AC\u33AD\u33AE\u33AF\u33B0\u33B1\u33B2\u33B3\u33B4\u33B5\u33B6\u33B7\u33B8\u33B9\u33BA\u33BB\u33BC\u33BD\u33BE\u33BF\u33C0\u33C1\u33C2\u33C3\u33C4\u33C5\u33C6\u33C7\u33C8\u33C9\u33CA\u33CB\u33CC\u33CD\u33CE\u33CF\u33D0\u33D1\u33D2\u33D3\u33D4\u33D5\u33D6\u33D7\u33D8\u33D9\u33DA\u33DB\u33DC\u33DD\u33DE\u33DF\u33E0\u33E1\u33E2\u33E3\u33E4\u33E5\u33E6\u33E7\u33E8\u33E9\u33EA\u33EB\u33EC\u33ED\u33EE\u33EF\u33F0\u33F1\u33F2\u33F3\u33F4\u33F5\u33F6\u33F7\u33F8\u33F9\u33FA\u33FB\u33FC\u33FD\u33FE\u33FF\u4DC0\u4DC1\u4DC2\u4DC3\u4DC4\u4DC5\u4DC6\u4DC7\u4DC8\u4DC9\u4DCA\u4DCB\u4DCC\u4DCD\u4DCE\u4DCF\u4DD0\u4DD1\u4DD2\u4DD3\u4DD4\u4DD5\u4DD6\u4DD7\u4DD8\u4DD9\u4DDA\u4DDB\u4DDC\u4DDD\u4DDE\u4DDF\u4DE0\u4DE1\u4DE2\u4DE3\u4DE4\u4DE5\u4DE6\u4DE7\u4DE8\u4DE9\u4DEA\u4DEB\u4DEC\u4DED\u4DEE\u4DEF\u4DF0\u4DF1\u4DF2\u4DF3\u4DF4\u4DF5\u4DF6\u4DF7\u4DF8\u4DF9\u4DFA\u4DFB\u4DFC\u4DFD\u4DFE\u4DFF\uA490\uA491\uA492\uA493\uA494\uA495\uA496\uA497\uA498\uA499\uA49A\uA49B\uA49C\uA49D\uA49E\uA49F\uA4A0\uA4A1\uA4A2\uA4A3\uA4A4\uA4A5\uA4A6\uA4A7\uA4A8\uA4A9\uA4AA\uA4AB\uA4AC\uA4AD\uA4AE\uA4AF\uA4B0\uA4B1\uA4B2\uA4B3\uA4B4\uA4B5\uA4B6\uA4B7\uA4B8\uA4B9\uA4BA\uA4BB\uA4BC\uA4BD\uA4BE\uA4BF\uA4C0\uA4C1\uA4C2\uA4C3\uA4C4\uA4C5\uA4C6\uA4FE\uA4FF\uA60D\uA60E\uA60F\uA673\uA67E\uA6F2\uA6F3\uA6F4\uA6F5\uA6F6\uA6F7\uA700\uA701\uA702\uA703\uA704\uA705\uA706\uA707\uA708\uA709\uA70A\uA70B\uA70C\uA70D\uA70E\uA70F\uA710\uA711\uA712\uA713\uA714\uA715\uA716\uA720\uA721\uA789\uA78A\uA828\uA829\uA82A\uA82B\uA836\uA837\uA839\uA874\uA875\uA876\uA877\uA8CE\uA8CF\uA8F8\uA8F9\uA8FA\uA92E\uA92F\uA95F\uA9C1\uA9C2\uA9C3\uA9C4\uA9C5\uA9C6\uA9C7\uA9C8\uA9C9\uA9CA\uA9CB\uA9CC\uA9CD\uA9DE\uA9DF\uAA5C\uAA5D\uAA5E\uAA5F\uAA77\uAA78\uAA79\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFB29\uFBB2\uFBB3\uFBB4\uFBB5\uFBB6\uFBB7\uFBB8\uFBB9\uFBBA\uFBBB\uFBBC\uFBBD\uFBBE\uFBBF\uFBC0\uFBC1\uFD3E\uFD3F\uFDFD\uFE10\uFE11\uFE12\uFE13\uFE14\uFE15\uFE16\uFE17\uFE18\uFE19\uFE30\uFE31\uFE32\uFE33\uFE34\uFE35\uFE36\uFE37\uFE38\uFE39\uFE3A\uFE3B\uFE3C\uFE3D\uFE3E\uFE3F\uFE40\uFE41\uFE42\uFE43\uFE44\uFE45\uFE46\uFE47\uFE48\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE58\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFE62\uFE63\uFE64\uFE65\uFE66\uFE68\uFE6A\uFE6B\uFF01\uFF02\uFF03\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF5B\uFF5C\uFF5D\uFF5E\uFF5F\uFF60\uFF61\uFF62\uFF63\uFF64\uFF65\uFFE2\uFFE3\uFFE4\uFFE8\uFFE9\uFFEA\uFFEB\uFFEC\uFFED\uFFEE\uFFFC\uFFFD]
  ;

fragment WSCHAR
  : [ \r\n\t\f\u2026\u2420\u303f\u1361\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u200B\u202F\u205F\u3000\uFEFF]
  ;

WS
  : WSCHAR+
  ;

fragment WSPUNCT
  : (PUNCTCHAR | WSCHAR)
  ;

CRAP : ('\\n'|'\\r'|'\\t') -> skip;

ANY : .+? -> skip;
